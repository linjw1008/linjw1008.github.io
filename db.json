{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"1f1051fbd47eb0d9052addb7e882bb58ba8b89e3","modified":1612095186238},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/CNAME","hash":"a53bb00744b78b0ce3dced13e486c97aa796f756","modified":1612075097683},{"_id":"source/robots.txt","hash":"ceec6acf88df902b0f23383b9d3babfb07f9b341","modified":1612075097722},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"source/404/index.md","hash":"97f7142f7f5779d68c283e2e582c168312c6eca0","modified":1612075097681},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"source/_drafts/Matlab-Simulink模型代数环错误防止与解决.md","hash":"90c7748ebbc2e7a142412885bc09ee7df0af783f","modified":1612075097686},{"_id":"source/_drafts/Matlab-Simulink模型提高运行速度的方法.md","hash":"1245d56db5af014992a57b8d7cd15526fb9466a5","modified":1612075097689},{"_id":"source/_posts/2019-03-02-基于CHNN的旅行商问题.md","hash":"a101d65495c1005f7d213a21c11781701333c902","modified":1612095541808},{"_id":"source/_posts/2021-01-25-并查集代码实现-详细注释（C-）.md","hash":"a212504bd90fd8f1dd1343f9583be71fa0e02259","modified":1612075097712},{"_id":"source/_posts/2021-01-31-windows下Github无法ping通解决方法.md","hash":"431a5c1381b1880c73c2cfedd19c868b3e559436","modified":1612092608330},{"_id":"source/_posts/2019-03-21-Keil开发环境build报错解决方法A1067E.md","hash":"8198284dd57b3014f9307fdf7a925e415a0f1deb","modified":1612075097710},{"_id":"source/_posts/2021-01-31-迪杰斯特拉（dijkstra）算法的C-实现.md","hash":"f0cca68f0b3e387287baaeb3462eed4affd66aec","modified":1612095575886},{"_id":"source/categories/index.md","hash":"e959313b7aad8141045e62f24b4aa2f359592d0b","modified":1612075097719},{"_id":"source/about/index.md","hash":"04bcca615bd895410ba4becf28e1e9622d5660cc","modified":1612075097716},{"_id":"source/tags/index.md","hash":"beaeefbebb4b1db36db6343eab7df3f78e2dfdaf","modified":1612075097733},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/avatar.jpg","hash":"d35c82f8b19a725a3201a023546d81f391e5a39e","modified":1612084003235},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"source/_posts/2019-03-02-基于CHNN的旅行商问题/circuit.png","hash":"d2df9093c28bf032086bf244eaba84ff0b7ffde4","modified":1612075097698},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/images/alipay.jpg","hash":"69a141ea13fe2b0b8448ba36a263bcc1e5a6f341","modified":1612085517578},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"763f83696e4443b06e50d8f4de90b62a71c2cbba","modified":1612083841860},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"source/_posts/2019-03-02-基于CHNN的旅行商问题/result.bmp","hash":"34700c2cae010e925d5cafde82aa43858b0292c7","modified":1612075097706},{"_id":"public/sitemap.xml","hash":"f3afd2cb82c4f42234d2e259e55018de0ffc7efa","modified":1612095672889},{"_id":"public/baidusitemap.xml","hash":"78af06a0566c944189bac28f8dc5793094eac31e","modified":1612095672890},{"_id":"public/404.html","hash":"565fc1936b77abddf00ce635c4a70078e0623a07","modified":1612095672910},{"_id":"public/categories/index.html","hash":"bfbcebb74337abfe826b36ec7405f3bab8e01f17","modified":1612095672910},{"_id":"public/tags/index.html","hash":"d5a5346b2f4a5294ca73625185a1c5f3e76ef4e3","modified":1612095672911},{"_id":"public/about/index.html","hash":"58f055770d2fd4b926dad51b32e59446160760e5","modified":1612095672911},{"_id":"public/categories/学习笔记/index.html","hash":"cd80930c1430340e32399df42dd5539e11fac04d","modified":1612095672911},{"_id":"public/categories/常见问题排查/index.html","hash":"c70bd4f15c316324a2ebfccb29e92fc3e00c4dba","modified":1612095672911},{"_id":"public/tags/人工神经网络/index.html","hash":"e26b3acc3e5323f6b6a0a73a39e40056c4f3243e","modified":1612095672911},{"_id":"public/tags/Matlab/index.html","hash":"e172f7e2ba3498a6449f04e35603083764c50411","modified":1612095672912},{"_id":"public/tags/Github/index.html","hash":"4925dbc2f0df324f9e4f51212082d0ac6bffd3e0","modified":1612095672912},{"_id":"public/tags/数据结构与算法/index.html","hash":"6e7440a90d7da5ff5790cecb6a348f353027f5d0","modified":1612095672912},{"_id":"public/tags/嵌入式/index.html","hash":"1962c139109fef453c2814566e83f67ac6a72ac4","modified":1612095672912},{"_id":"public/tags/STM32/index.html","hash":"c7048153eea727cb9e2515cadbca645b816a98e0","modified":1612095672912},{"_id":"public/tags/Keil/index.html","hash":"dbc1ec2df7668aaf453f2f0c53c91bf2a066ebfa","modified":1612095672912},{"_id":"public/archives/index.html","hash":"eb81b8b58644d41fa319a3fab27b7f5b52ea1f91","modified":1612095672912},{"_id":"public/archives/2019/index.html","hash":"8a24d978bc8b1f1195b56de8b9c84581950bec40","modified":1612095672913},{"_id":"public/archives/2019/03/index.html","hash":"c7d367c041b400cb3c7dbb6ed47baf36dc47fbcd","modified":1612095672913},{"_id":"public/archives/2021/index.html","hash":"582823602cb84f16f32226b46ff9c69f76f729df","modified":1612095672913},{"_id":"public/archives/2021/01/index.html","hash":"3cf715d55c8f5640359d296275a587b0efda58d8","modified":1612095672913},{"_id":"public/2021/01/31/迪杰斯特拉（dijkstra）算法的C-实现/index.html","hash":"9c57776e292ce4449addd813462ba0ceda49282d","modified":1612095672913},{"_id":"public/2021/01/31/windows下Github无法ping通解决方法/index.html","hash":"3edebc1b39c9f0cca8f8260b11492c77a8aae3fc","modified":1612095672913},{"_id":"public/2021/01/25/并查集代码实现-详细注释（C-）/index.html","hash":"01db73c8367edaedce9ce51b96fa19e212fd8a6e","modified":1612095672913},{"_id":"public/2019/03/21/Keil开发环境build报错解决方法A1067E/index.html","hash":"779b8c5e3e84f5fb2f31601775d33e94578c9162","modified":1612095672913},{"_id":"public/2019/03/02/基于CHNN的旅行商问题/index.html","hash":"91f43d1a4555afccbf23eafba7b49122137ea8e2","modified":1612095672913},{"_id":"public/index.html","hash":"45d10d7a39f6d3a6c789222a1c5c2156cd15481f","modified":1612095672914},{"_id":"public/robots.txt","hash":"ceec6acf88df902b0f23383b9d3babfb07f9b341","modified":1612095672943},{"_id":"public/CNAME","hash":"a53bb00744b78b0ce3dced13e486c97aa796f756","modified":1612095672943},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1612095672943},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1612095672943},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1612095672944},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1612095672944},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1612095672944},{"_id":"public/images/avatar.jpg","hash":"d35c82f8b19a725a3201a023546d81f391e5a39e","modified":1612095672944},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1612095672944},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1612095672944},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1612095672944},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1612095672944},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1612095672944},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1612095672945},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1612095672945},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1612095672945},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1612095672946},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1612095672946},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1612095672946},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1612095672946},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1612095672946},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1612095672946},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1612095672946},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1612095672947},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1612095672947},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1612095672947},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1612095672947},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1612095672947},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1612095672947},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1612095672947},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1612095672947},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1612095672947},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1612095672948},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1612095672948},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1612095672948},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1612095672948},{"_id":"public/2019/03/02/基于CHNN的旅行商问题/circuit.png","hash":"d2df9093c28bf032086bf244eaba84ff0b7ffde4","modified":1612095672948},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1612095674351},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1612095674366},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1612095674404},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1612095674404},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1612095674404},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1612095674404},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1612095674405},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1612095674405},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1612095674405},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1612095674405},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1612095674405},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1612095674405},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1612095674405},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1612095674405},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1612095674405},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1612095674406},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1612095674406},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1612095674406},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1612095674406},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1612095674406},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1612095674406},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1612095674406},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1612095674406},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1612095674407},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1612095674407},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1612095674407},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1612095674407},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1612095674407},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1612095674407},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1612095674407},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1612095674407},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1612095674407},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1612095674408},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1612095674408},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1612095674408},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1612095674408},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1612095674408},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1612095674408},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1612095674408},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1612095674408},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1612095674408},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1612095674408},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1612095674409},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1612095674409},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1612095674409},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1612095674409},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1612095674409},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1612095674409},{"_id":"public/lib/fastclick/README.html","hash":"c07b353b4efa132290ec4479102a55d80ac6d300","modified":1612095674409},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a08fccd381c8fdb70ba8974b208254c5ba23a95f","modified":1612095674409},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"06811ca2f722dead021493457f27cdc264ef928d","modified":1612095674409},{"_id":"public/css/main.css","hash":"36c3a1a6a55d0804b5802bd52ef66d64fa61ba3b","modified":1612095674410},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1612095674410},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1612095674410},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1612095674410},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1612095674410},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1612095674410},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1612095674410},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1612095674411},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1612095674411},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1612095674411},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1612095674411},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1612095674411},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1612095674412},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1612095674412},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1612095674412},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1612095674412},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1612095674412},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1612095674412},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1612095674413},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1612095674413},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1612095674413},{"_id":"public/images/alipay.jpg","hash":"69a141ea13fe2b0b8448ba36a263bcc1e5a6f341","modified":1612095674414},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1612095674414},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1612095674415},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1612095674509},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1612095674977},{"_id":"public/2019/03/02/基于CHNN的旅行商问题/result.bmp","hash":"34700c2cae010e925d5cafde82aa43858b0292c7","modified":1612095674980}],"Category":[{"name":"学习笔记","_id":"ckkl44zc0000870udlnk236fh"},{"name":"常见问题排查","_id":"ckkl44zct000d70uduqlumakk"}],"Data":[],"Page":[{"title":"","date":"2019-03-02T05:14:51.000Z","comments":0,"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404/index.md","raw":"---\ntitle: #404 NOT Found: 该页无法显示\ndate: 2019-03-02 13:14:51\ncomments: false\npermalink: /404\n---\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","updated":"2021-01-31T06:38:17.681Z","path":"/404.html","layout":"page","_id":"ckkl44zba000170udgn9w5ajo","content":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"categories","date":"2019-03-02T03:24:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-02 11:24:42\ntype: \"categories\"\n---\n","updated":"2021-01-31T06:38:17.719Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckkl44zbh000370udm4jy75kk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-03-02T05:05:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-02 13:05:00\ntype: tags\n---\n","updated":"2021-01-31T06:38:17.733Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckkl44zbq000570udcmkfvjs8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2019-03-02T05:03:31.000Z","type":"about","_content":"# 教育经历\n* 上海交通大学电气工程系 硕士研究生（在读）\n\t* 2018年9月至今\n* 上海交通大学电气工程系 本科\n\t* 2014年9月至2018年6月\n\n# 工作经历\n* 杭州复杂美科技有限公司\n\t* 2018年7月至2018年10月\n\t* 区块链软件开发实习生\n* 上海未来之城青少年STEM教育中心\n\t* 2018年1月至2018年7月\n\t* 助理电气工程师\n* 阿里云计算有限公司\n\t* 2020年6月至2020年9月\n\t* 实习开发工程师\n\t\n# 技能\n* 嵌入式开发\n* Matlab/Simulink\n* C/C++、Java、Golang\n* PCB Layout\n\n# 联系方式\n* E-mail：linjw1008@163.com","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-03-02 13:03:31\ntype: about\n---\n# 教育经历\n* 上海交通大学电气工程系 硕士研究生（在读）\n\t* 2018年9月至今\n* 上海交通大学电气工程系 本科\n\t* 2014年9月至2018年6月\n\n# 工作经历\n* 杭州复杂美科技有限公司\n\t* 2018年7月至2018年10月\n\t* 区块链软件开发实习生\n* 上海未来之城青少年STEM教育中心\n\t* 2018年1月至2018年7月\n\t* 助理电气工程师\n* 阿里云计算有限公司\n\t* 2020年6月至2020年9月\n\t* 实习开发工程师\n\t\n# 技能\n* 嵌入式开发\n* Matlab/Simulink\n* C/C++、Java、Golang\n* PCB Layout\n\n# 联系方式\n* E-mail：linjw1008@163.com","updated":"2021-01-31T06:38:17.716Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckkl44zbx000770uds51g6wxq","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li>上海交通大学电气工程系 硕士研究生（在读）<ul>\n<li>2018年9月至今</li>\n</ul>\n</li>\n<li>上海交通大学电气工程系 本科<ul>\n<li>2014年9月至2018年6月</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><ul>\n<li>杭州复杂美科技有限公司<ul>\n<li>2018年7月至2018年10月</li>\n<li>区块链软件开发实习生</li>\n</ul>\n</li>\n<li>上海未来之城青少年STEM教育中心<ul>\n<li>2018年1月至2018年7月</li>\n<li>助理电气工程师</li>\n</ul>\n</li>\n<li>阿里云计算有限公司<ul>\n<li>2020年6月至2020年9月</li>\n<li>实习开发工程师</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h1><ul>\n<li>嵌入式开发</li>\n<li>Matlab/Simulink</li>\n<li>C/C++、Java、Golang</li>\n<li>PCB Layout</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>E-mail：linjw1008@163.com</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li>上海交通大学电气工程系 硕士研究生（在读）<ul>\n<li>2018年9月至今</li>\n</ul>\n</li>\n<li>上海交通大学电气工程系 本科<ul>\n<li>2014年9月至2018年6月</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><ul>\n<li>杭州复杂美科技有限公司<ul>\n<li>2018年7月至2018年10月</li>\n<li>区块链软件开发实习生</li>\n</ul>\n</li>\n<li>上海未来之城青少年STEM教育中心<ul>\n<li>2018年1月至2018年7月</li>\n<li>助理电气工程师</li>\n</ul>\n</li>\n<li>阿里云计算有限公司<ul>\n<li>2020年6月至2020年9月</li>\n<li>实习开发工程师</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h1><ul>\n<li>嵌入式开发</li>\n<li>Matlab/Simulink</li>\n<li>C/C++、Java、Golang</li>\n<li>PCB Layout</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>E-mail：linjw1008@163.com</li>\n</ul>\n"}],"Post":[{"title":"Matlab/Simulink模型代数环错误防止与解决","date":"2019-03-06T04:49:45.000Z","_content":"","source":"_drafts/Matlab-Simulink模型代数环错误防止与解决.md","raw":"---\ntitle: Matlab/Simulink模型代数环错误防止与解决\ndate: 2019-03-06 12:49:45\ntags:\n---\n","slug":"Matlab-Simulink模型代数环错误防止与解决","published":0,"updated":"2021-01-31T06:38:17.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkl44zay000070udcdka09tf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Matlab/Simulink模型提高运行速度的方法","date":"2019-03-06T04:49:11.000Z","_content":"\n# 启用加速器\n\n# 检查代数环并修正","source":"_drafts/Matlab-Simulink模型提高运行速度的方法.md","raw":"---\ntitle: Matlab/Simulink模型提高运行速度的方法\ndate: 2019-03-06 12:49:11\ntags:\n---\n\n# 启用加速器\n\n# 检查代数环并修正","slug":"Matlab-Simulink模型提高运行速度的方法","published":0,"updated":"2021-01-31T06:38:17.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkl44zbd000270ud47keo7zu","content":"<h1 id=\"启用加速器\"><a href=\"#启用加速器\" class=\"headerlink\" title=\"启用加速器\"></a>启用加速器</h1><h1 id=\"检查代数环并修正\"><a href=\"#检查代数环并修正\" class=\"headerlink\" title=\"检查代数环并修正\"></a>检查代数环并修正</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"启用加速器\"><a href=\"#启用加速器\" class=\"headerlink\" title=\"启用加速器\"></a>启用加速器</h1><h1 id=\"检查代数环并修正\"><a href=\"#检查代数环并修正\" class=\"headerlink\" title=\"检查代数环并修正\"></a>检查代数环并修正</h1>"},{"title":"基于CHNN的旅行商问题","date":"2019-03-02T07:05:41.000Z","mathjax":true,"_content":"\n最近一门人工神经网络的课程结课，利用Matlab做了一个小Project，在此分享。\n<!-- more -->\n\n# 问题描述\n旅行商问题（Travelling salesman problem, TSP）：给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。它是组合优化中的一个NP困难问题，很难通过枚举法求解，特别是在N较大的时候。但是通过神经网络或者其他启发式算法可以较好地解决该问题。\n# Hopfield网络\n## 简介\nHopfield神经网络是一种递归神经网络，由约翰·霍普菲尔德等人在1982年发明。Hopfield网络是一种结合存储系统和二元系统的神经网络，有连续型与离散型之分。TSP问题可用连续型Hopfield网络（Continuous Hopfield Neural Network, CHNN）解决，故本文主要介绍CHNN网络。\nCHNN可由一些简单的电子线路连接起来实现（Fun Fact：发明CHNN网络的人是搞物理的，网络实验也是在物理元件电路上进行的），如图所示，每个神经元均具有连续时间变化的输出值，并采用具有饱和非线性的运算放大器来模拟神经元的S型单调输入——输出关系。\n![](circuit.png)\n对节点数量为N的CHNN网络，其神经元状态变量的动态变化可用下述非线性微分方程组来描述\n$$\n\\begin{align}\n&c_i\\frac{du_i}{dt}=\\sum_{j=1}^{N}T_{ij}v_{j}-\\frac{u_i}{R_i}+I_i, i=1,2,3,......,N\\\\\n&v_i=f_i(u_i), i=1,2,3,......,N\n\\end{align}\n$$\n其中，$f(x)$为激励函数，$f(x)=\\frac{1}{2}[1+tanh(\\frac{x}{x_0})]$。\n定义能量函数\n$$E=-\\frac{1}{2}\\sum_{i=1}^{N}\\sum_{j=1, j\\neq i}^{N}T_{ij}v_iv_j-\\sum_{i=1}^{N}v_iI_i+\\sum_{i=1}^{N}\\frac{1}{R_i}\\int_0^{v_i}f^{-1}(v)dv$$\nCHNN能量函数的表达形式与物理意义的能量函数一致，用于表征网络状态的变化趋势。\n\n\n## 两个结论\n并有如下结论（详细推导过程不赘述）\n* 结论1：$\\frac{\\partial E}{\\partial v_i}=-C_i\\frac{\\partial u_i}{\\partial t}$\n* 结论2：若函数$f(v)$是单调递增且连续的，并有$C_i>0，T_{ij}=T_{ji}$，则随着网络状态的变化，有$\\frac{\\partial E}{\\partial t}≤0$，当且仅当$\\frac{\\partial v_i}{\\partial t}=0$时，$\\frac{\\partial E}{\\partial t}=0$。\n\n# 利用CHNN求解TSP问题\n## 置换矩阵\n由于问题中要求每个城市要求均需访问一次且不重复，故采用置换矩阵表示路径顺序。\n* 置换矩阵\n矩阵的每一行表示一个城市，每一列表示访问的顺序，用元素“1”表示访问，元素“0”表示没有访问。\n\n## 求解思路\n基于以上结论，若将最优化问题的目标函数转换成网络的能量函数，把问题变量对应于网络状态，则可将CHNN网络用于解决优化组合问题。\n在实际求解时，可根据状态方程反推出网络的结构，即$T_{ij}$、$I_i$等参数，然后在确定的网络下进行迭代求解。但当问题较为复杂时，往往比较难通过状态方程反推出网络结构，这时可利用上述重要结论，首先为网络输出赋初值，然后在每次迭代时求出状态方程的增量进行叠加，使网络的输出逐渐收敛。\n## 能量函数\nTSP问题所用的能量函数可包含约束项和优化项。\n* 约束项\n约束项主要保证每个城市均被访问且只能被访问1次，即输出矩阵为置换矩阵。可用数学形式表示如下\n$$E_1=\\frac{A}{2}\\sum_{x=1}^{N}\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N}v_{xi}v_{xj}\n+\\frac{B}{2}\\sum_{i=1}^{N}\\sum_{x=1}^{N-1}\\sum_{y=x+1}^{N}v_{xi}v_{yi}\n+\\frac{C}{2}(\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N)^2$$\n* 优化项\n优化项使得总路程往最小化的方向变化。可表示如下\n$$E_2=\\frac{D}{2}\\sum_{x=1}^{N}\\sum_{y\\neq x}^{N}\\sum_{i=1}^{N}d_{xy}v_{xi}(v_{y,i+1}+v_{y,i-1})$$\n* 总能量函数\n总的能量函数为\n$$\\begin{align}\nE=&\\frac{A}{2}\\sum_{x=1}^{N}\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N}v_{xi}v_{xj} \\\\\n&+\\frac{B}{2}\\sum_{i=1}^{N}\\sum_{x=1}^{N-1}\\sum_{y=x+1}^{N}v_{xi}v_{yi} \\\\\n&+\\frac{C}{2}(\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N)^2 \\\\\n&+\\frac{D}{2}\\sum_{x=1}^{N}\\sum_{y\\neq x}^{N}\\sum_{i=1}^{N}d_{xy}v_{xi}(v_{y,i+1}+v_{y,i-1}) \\\\\n&+\\sum_{x=1}^{N}\\sum_{i=1}^{N}\\frac{1}{R_{xi}}\\int_0^{v_{xi}}f^{-1}(v)dv\n\\end{align}$$\n\n## 动态方程\n根据结论1，可得到以下动态方程，该方程用于每次迭代时更新状态变量。\n$$\\begin{align}\nc_{xi}\\frac{du_{xi}}{dt}&=-\\frac{\\partial E}{\\partial v_{xi}}\\\\\n&=-\\frac{u_{xi}}{R_{xi}}-\\frac{A}{2}\\sum_{j=1,j\\neq i}^{N}v_{xj}-\\frac{B}{2}\\sum_{y=1,y\\neq x}^{N}y_{yi} \\\\\n&-C[\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N]-\\frac{D}{2}\\sum_{y=1,y\\neq x}^{N}d_{xy}[v_{y,i+1}+v_{y,i-1}]\n\\end{align}\n$$\n# 算法实现\n## 算法流程\n1. 状态变量初始化\n首先，按照下式为各状态变量赋随机初值\n$$u_{xi}(t_0)=\\frac{1}{2}u_0ln(N-1)+\\Delta u_{xi}$$\n其中，$\\Delta  u_{xi}$取区间$(-1,+1)$内的随机值。\n2. 计算神经元输出\n根据激励函数计算神经元的输出\n$$v_{xi}(t_0+k\\Delta  t)=f[u_{xi}(t_0+k\\Delta t)]=\\frac{1}{2}{1+tanh[\\frac{u_{xi}(t_0+k\\Delta t)}{u_{0}}]}$$\n3. 计算状态变量增量\n得到神经元的输出后，可继续计算状态变量的增量\n$$\\begin{align}\nc_{xi}\\frac{du_{xi}}{dt}=&-\\frac{u_{xi}(t_0+k\\Delta  t)}{R_{xi}}- \\\\\n&-\\frac{A}{2}\\sum_{j=1,j\\neq i}^{N}v_{xj}(t_0+k\\Delta  t) \\\\\n&-\\frac{B}{2}\\sum_{y=1,y\\neq x}^{N}y_{yi}(t_0+k\\Delta  t) \\\\\n&-C[\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}(t_0+k\\Delta  t)-N] \\\\\n&-\\frac{D}{2}\\sum_{y=1,y\\neq x}^{N}d_{xy}[v_{y,i+1}(t_0+k\\Delta  t)+v_{y,i-1}(t_0+k\\Delta  t)]\n\\end{align}\n$$\n4. 计算新的状态变量\n将状态变量与上一时刻的状态变量叠加得到新的状态变量。\n5. 计算能量\n根据新的状态变量和神经元输出，代入网络能量表达式计算得到本次迭代后的能量。\n6. 判断是否满足终止条件\n当能量值不再变化或者迭代次数达到最大值时，则满足迭代收敛条件。但在实际操作中，能量值很难满足完全不变的要求，为提高求解效率，可计算两次迭代之间的能量变化量，当变化率小于某一阈值时认为能量不变。\n若满足迭代终止条件，则进入下一步骤，否则返回步骤2继续迭代。\n7. 检查解是否满足要求\n检查解是否满足输出矩阵为置换矩阵，若不满足要求，则返回步骤1，否则输出求解结果。\n\n## 源代码\n请见Github：\nhttps://github.com/linjw1008/TSP_MATLAB\n相关参数可以微调，达到更好的求解效果。\n## 运行结果\n![](result.bmp)","source":"_posts/2019-03-02-基于CHNN的旅行商问题.md","raw":"---\ntitle: 基于CHNN的旅行商问题\ndate: 2019-03-02 15:05:41\ncategories:\n- 学习笔记\ntags:\n- 人工神经网络\n- Matlab\nmathjax: true\n---\n\n最近一门人工神经网络的课程结课，利用Matlab做了一个小Project，在此分享。\n<!-- more -->\n\n# 问题描述\n旅行商问题（Travelling salesman problem, TSP）：给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。它是组合优化中的一个NP困难问题，很难通过枚举法求解，特别是在N较大的时候。但是通过神经网络或者其他启发式算法可以较好地解决该问题。\n# Hopfield网络\n## 简介\nHopfield神经网络是一种递归神经网络，由约翰·霍普菲尔德等人在1982年发明。Hopfield网络是一种结合存储系统和二元系统的神经网络，有连续型与离散型之分。TSP问题可用连续型Hopfield网络（Continuous Hopfield Neural Network, CHNN）解决，故本文主要介绍CHNN网络。\nCHNN可由一些简单的电子线路连接起来实现（Fun Fact：发明CHNN网络的人是搞物理的，网络实验也是在物理元件电路上进行的），如图所示，每个神经元均具有连续时间变化的输出值，并采用具有饱和非线性的运算放大器来模拟神经元的S型单调输入——输出关系。\n![](circuit.png)\n对节点数量为N的CHNN网络，其神经元状态变量的动态变化可用下述非线性微分方程组来描述\n$$\n\\begin{align}\n&c_i\\frac{du_i}{dt}=\\sum_{j=1}^{N}T_{ij}v_{j}-\\frac{u_i}{R_i}+I_i, i=1,2,3,......,N\\\\\n&v_i=f_i(u_i), i=1,2,3,......,N\n\\end{align}\n$$\n其中，$f(x)$为激励函数，$f(x)=\\frac{1}{2}[1+tanh(\\frac{x}{x_0})]$。\n定义能量函数\n$$E=-\\frac{1}{2}\\sum_{i=1}^{N}\\sum_{j=1, j\\neq i}^{N}T_{ij}v_iv_j-\\sum_{i=1}^{N}v_iI_i+\\sum_{i=1}^{N}\\frac{1}{R_i}\\int_0^{v_i}f^{-1}(v)dv$$\nCHNN能量函数的表达形式与物理意义的能量函数一致，用于表征网络状态的变化趋势。\n\n\n## 两个结论\n并有如下结论（详细推导过程不赘述）\n* 结论1：$\\frac{\\partial E}{\\partial v_i}=-C_i\\frac{\\partial u_i}{\\partial t}$\n* 结论2：若函数$f(v)$是单调递增且连续的，并有$C_i>0，T_{ij}=T_{ji}$，则随着网络状态的变化，有$\\frac{\\partial E}{\\partial t}≤0$，当且仅当$\\frac{\\partial v_i}{\\partial t}=0$时，$\\frac{\\partial E}{\\partial t}=0$。\n\n# 利用CHNN求解TSP问题\n## 置换矩阵\n由于问题中要求每个城市要求均需访问一次且不重复，故采用置换矩阵表示路径顺序。\n* 置换矩阵\n矩阵的每一行表示一个城市，每一列表示访问的顺序，用元素“1”表示访问，元素“0”表示没有访问。\n\n## 求解思路\n基于以上结论，若将最优化问题的目标函数转换成网络的能量函数，把问题变量对应于网络状态，则可将CHNN网络用于解决优化组合问题。\n在实际求解时，可根据状态方程反推出网络的结构，即$T_{ij}$、$I_i$等参数，然后在确定的网络下进行迭代求解。但当问题较为复杂时，往往比较难通过状态方程反推出网络结构，这时可利用上述重要结论，首先为网络输出赋初值，然后在每次迭代时求出状态方程的增量进行叠加，使网络的输出逐渐收敛。\n## 能量函数\nTSP问题所用的能量函数可包含约束项和优化项。\n* 约束项\n约束项主要保证每个城市均被访问且只能被访问1次，即输出矩阵为置换矩阵。可用数学形式表示如下\n$$E_1=\\frac{A}{2}\\sum_{x=1}^{N}\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N}v_{xi}v_{xj}\n+\\frac{B}{2}\\sum_{i=1}^{N}\\sum_{x=1}^{N-1}\\sum_{y=x+1}^{N}v_{xi}v_{yi}\n+\\frac{C}{2}(\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N)^2$$\n* 优化项\n优化项使得总路程往最小化的方向变化。可表示如下\n$$E_2=\\frac{D}{2}\\sum_{x=1}^{N}\\sum_{y\\neq x}^{N}\\sum_{i=1}^{N}d_{xy}v_{xi}(v_{y,i+1}+v_{y,i-1})$$\n* 总能量函数\n总的能量函数为\n$$\\begin{align}\nE=&\\frac{A}{2}\\sum_{x=1}^{N}\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N}v_{xi}v_{xj} \\\\\n&+\\frac{B}{2}\\sum_{i=1}^{N}\\sum_{x=1}^{N-1}\\sum_{y=x+1}^{N}v_{xi}v_{yi} \\\\\n&+\\frac{C}{2}(\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N)^2 \\\\\n&+\\frac{D}{2}\\sum_{x=1}^{N}\\sum_{y\\neq x}^{N}\\sum_{i=1}^{N}d_{xy}v_{xi}(v_{y,i+1}+v_{y,i-1}) \\\\\n&+\\sum_{x=1}^{N}\\sum_{i=1}^{N}\\frac{1}{R_{xi}}\\int_0^{v_{xi}}f^{-1}(v)dv\n\\end{align}$$\n\n## 动态方程\n根据结论1，可得到以下动态方程，该方程用于每次迭代时更新状态变量。\n$$\\begin{align}\nc_{xi}\\frac{du_{xi}}{dt}&=-\\frac{\\partial E}{\\partial v_{xi}}\\\\\n&=-\\frac{u_{xi}}{R_{xi}}-\\frac{A}{2}\\sum_{j=1,j\\neq i}^{N}v_{xj}-\\frac{B}{2}\\sum_{y=1,y\\neq x}^{N}y_{yi} \\\\\n&-C[\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N]-\\frac{D}{2}\\sum_{y=1,y\\neq x}^{N}d_{xy}[v_{y,i+1}+v_{y,i-1}]\n\\end{align}\n$$\n# 算法实现\n## 算法流程\n1. 状态变量初始化\n首先，按照下式为各状态变量赋随机初值\n$$u_{xi}(t_0)=\\frac{1}{2}u_0ln(N-1)+\\Delta u_{xi}$$\n其中，$\\Delta  u_{xi}$取区间$(-1,+1)$内的随机值。\n2. 计算神经元输出\n根据激励函数计算神经元的输出\n$$v_{xi}(t_0+k\\Delta  t)=f[u_{xi}(t_0+k\\Delta t)]=\\frac{1}{2}{1+tanh[\\frac{u_{xi}(t_0+k\\Delta t)}{u_{0}}]}$$\n3. 计算状态变量增量\n得到神经元的输出后，可继续计算状态变量的增量\n$$\\begin{align}\nc_{xi}\\frac{du_{xi}}{dt}=&-\\frac{u_{xi}(t_0+k\\Delta  t)}{R_{xi}}- \\\\\n&-\\frac{A}{2}\\sum_{j=1,j\\neq i}^{N}v_{xj}(t_0+k\\Delta  t) \\\\\n&-\\frac{B}{2}\\sum_{y=1,y\\neq x}^{N}y_{yi}(t_0+k\\Delta  t) \\\\\n&-C[\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}(t_0+k\\Delta  t)-N] \\\\\n&-\\frac{D}{2}\\sum_{y=1,y\\neq x}^{N}d_{xy}[v_{y,i+1}(t_0+k\\Delta  t)+v_{y,i-1}(t_0+k\\Delta  t)]\n\\end{align}\n$$\n4. 计算新的状态变量\n将状态变量与上一时刻的状态变量叠加得到新的状态变量。\n5. 计算能量\n根据新的状态变量和神经元输出，代入网络能量表达式计算得到本次迭代后的能量。\n6. 判断是否满足终止条件\n当能量值不再变化或者迭代次数达到最大值时，则满足迭代收敛条件。但在实际操作中，能量值很难满足完全不变的要求，为提高求解效率，可计算两次迭代之间的能量变化量，当变化率小于某一阈值时认为能量不变。\n若满足迭代终止条件，则进入下一步骤，否则返回步骤2继续迭代。\n7. 检查解是否满足要求\n检查解是否满足输出矩阵为置换矩阵，若不满足要求，则返回步骤1，否则输出求解结果。\n\n## 源代码\n请见Github：\nhttps://github.com/linjw1008/TSP_MATLAB\n相关参数可以微调，达到更好的求解效果。\n## 运行结果\n![](result.bmp)","slug":"基于CHNN的旅行商问题","published":1,"updated":"2021-01-31T12:19:01.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkl44zbm000470udp7w0rnrf","content":"<p>最近一门人工神经网络的课程结课，利用Matlab做了一个小Project，在此分享。<br><a id=\"more\"></a></p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>旅行商问题（Travelling salesman problem, TSP）：给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。它是组合优化中的一个NP困难问题，很难通过枚举法求解，特别是在N较大的时候。但是通过神经网络或者其他启发式算法可以较好地解决该问题。</p>\n<h1 id=\"Hopfield网络\"><a href=\"#Hopfield网络\" class=\"headerlink\" title=\"Hopfield网络\"></a>Hopfield网络</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Hopfield神经网络是一种递归神经网络，由约翰·霍普菲尔德等人在1982年发明。Hopfield网络是一种结合存储系统和二元系统的神经网络，有连续型与离散型之分。TSP问题可用连续型Hopfield网络（Continuous Hopfield Neural Network, CHNN）解决，故本文主要介绍CHNN网络。<br>CHNN可由一些简单的电子线路连接起来实现（Fun Fact：发明CHNN网络的人是搞物理的，网络实验也是在物理元件电路上进行的），如图所示，每个神经元均具有连续时间变化的输出值，并采用具有饱和非线性的运算放大器来模拟神经元的S型单调输入——输出关系。<br><img src=\"circuit.png\" alt><br>对节点数量为N的CHNN网络，其神经元状态变量的动态变化可用下述非线性微分方程组来描述</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\n&c_i\\frac{du_i}{dt}=\\sum_{j=1}^{N}T_{ij}v_{j}-\\frac{u_i}{R_i}+I_i, i=1,2,3,......,N\\\\\n&v_i=f_i(u_i), i=1,2,3,......,N\n\\end{align}</script><p>其中，$f(x)$为激励函数，$f(x)=\\frac{1}{2}[1+tanh(\\frac{x}{x_0})]$。<br>定义能量函数</p>\n<script type=\"math/tex; mode=display\">E=-\\frac{1}{2}\\sum_{i=1}^{N}\\sum_{j=1, j\\neq i}^{N}T_{ij}v_iv_j-\\sum_{i=1}^{N}v_iI_i+\\sum_{i=1}^{N}\\frac{1}{R_i}\\int_0^{v_i}f^{-1}(v)dv</script><p>CHNN能量函数的表达形式与物理意义的能量函数一致，用于表征网络状态的变化趋势。</p>\n<h2 id=\"两个结论\"><a href=\"#两个结论\" class=\"headerlink\" title=\"两个结论\"></a>两个结论</h2><p>并有如下结论（详细推导过程不赘述）</p>\n<ul>\n<li>结论1：$\\frac{\\partial E}{\\partial v_i}=-C_i\\frac{\\partial u_i}{\\partial t}$</li>\n<li>结论2：若函数$f(v)$是单调递增且连续的，并有$C<em>i&gt;0，T</em>{ij}=T_{ji}$，则随着网络状态的变化，有$\\frac{\\partial E}{\\partial t}≤0$，当且仅当$\\frac{\\partial v_i}{\\partial t}=0$时，$\\frac{\\partial E}{\\partial t}=0$。</li>\n</ul>\n<h1 id=\"利用CHNN求解TSP问题\"><a href=\"#利用CHNN求解TSP问题\" class=\"headerlink\" title=\"利用CHNN求解TSP问题\"></a>利用CHNN求解TSP问题</h1><h2 id=\"置换矩阵\"><a href=\"#置换矩阵\" class=\"headerlink\" title=\"置换矩阵\"></a>置换矩阵</h2><p>由于问题中要求每个城市要求均需访问一次且不重复，故采用置换矩阵表示路径顺序。</p>\n<ul>\n<li>置换矩阵<br>矩阵的每一行表示一个城市，每一列表示访问的顺序，用元素“1”表示访问，元素“0”表示没有访问。</li>\n</ul>\n<h2 id=\"求解思路\"><a href=\"#求解思路\" class=\"headerlink\" title=\"求解思路\"></a>求解思路</h2><p>基于以上结论，若将最优化问题的目标函数转换成网络的能量函数，把问题变量对应于网络状态，则可将CHNN网络用于解决优化组合问题。<br>在实际求解时，可根据状态方程反推出网络的结构，即$T_{ij}$、$I_i$等参数，然后在确定的网络下进行迭代求解。但当问题较为复杂时，往往比较难通过状态方程反推出网络结构，这时可利用上述重要结论，首先为网络输出赋初值，然后在每次迭代时求出状态方程的增量进行叠加，使网络的输出逐渐收敛。</p>\n<h2 id=\"能量函数\"><a href=\"#能量函数\" class=\"headerlink\" title=\"能量函数\"></a>能量函数</h2><p>TSP问题所用的能量函数可包含约束项和优化项。</p>\n<ul>\n<li>约束项<br>约束项主要保证每个城市均被访问且只能被访问1次，即输出矩阵为置换矩阵。可用数学形式表示如下<script type=\"math/tex; mode=display\">E_1=\\frac{A}{2}\\sum_{x=1}^{N}\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N}v_{xi}v_{xj}\n+\\frac{B}{2}\\sum_{i=1}^{N}\\sum_{x=1}^{N-1}\\sum_{y=x+1}^{N}v_{xi}v_{yi}\n+\\frac{C}{2}(\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N)^2</script></li>\n<li>优化项<br>优化项使得总路程往最小化的方向变化。可表示如下<script type=\"math/tex; mode=display\">E_2=\\frac{D}{2}\\sum_{x=1}^{N}\\sum_{y\\neq x}^{N}\\sum_{i=1}^{N}d_{xy}v_{xi}(v_{y,i+1}+v_{y,i-1})</script></li>\n<li>总能量函数<br>总的能量函数为<script type=\"math/tex; mode=display\">\\begin{align}\nE=&\\frac{A}{2}\\sum_{x=1}^{N}\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N}v_{xi}v_{xj} \\\\\n&+\\frac{B}{2}\\sum_{i=1}^{N}\\sum_{x=1}^{N-1}\\sum_{y=x+1}^{N}v_{xi}v_{yi} \\\\\n&+\\frac{C}{2}(\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N)^2 \\\\\n&+\\frac{D}{2}\\sum_{x=1}^{N}\\sum_{y\\neq x}^{N}\\sum_{i=1}^{N}d_{xy}v_{xi}(v_{y,i+1}+v_{y,i-1}) \\\\\n&+\\sum_{x=1}^{N}\\sum_{i=1}^{N}\\frac{1}{R_{xi}}\\int_0^{v_{xi}}f^{-1}(v)dv\n\\end{align}</script></li>\n</ul>\n<h2 id=\"动态方程\"><a href=\"#动态方程\" class=\"headerlink\" title=\"动态方程\"></a>动态方程</h2><p>根据结论1，可得到以下动态方程，该方程用于每次迭代时更新状态变量。</p>\n<script type=\"math/tex; mode=display\">\\begin{align}\nc_{xi}\\frac{du_{xi}}{dt}&=-\\frac{\\partial E}{\\partial v_{xi}}\\\\\n&=-\\frac{u_{xi}}{R_{xi}}-\\frac{A}{2}\\sum_{j=1,j\\neq i}^{N}v_{xj}-\\frac{B}{2}\\sum_{y=1,y\\neq x}^{N}y_{yi} \\\\\n&-C[\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N]-\\frac{D}{2}\\sum_{y=1,y\\neq x}^{N}d_{xy}[v_{y,i+1}+v_{y,i-1}]\n\\end{align}</script><h1 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h1><h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>状态变量初始化<br>首先，按照下式为各状态变量赋随机初值<script type=\"math/tex; mode=display\">u_{xi}(t_0)=\\frac{1}{2}u_0ln(N-1)+\\Delta u_{xi}</script>其中，$\\Delta  u_{xi}$取区间$(-1,+1)$内的随机值。</li>\n<li>计算神经元输出<br>根据激励函数计算神经元的输出<script type=\"math/tex; mode=display\">v_{xi}(t_0+k\\Delta  t)=f[u_{xi}(t_0+k\\Delta t)]=\\frac{1}{2}{1+tanh[\\frac{u_{xi}(t_0+k\\Delta t)}{u_{0}}]}</script></li>\n<li>计算状态变量增量<br>得到神经元的输出后，可继续计算状态变量的增量<script type=\"math/tex; mode=display\">\\begin{align}\nc_{xi}\\frac{du_{xi}}{dt}=&-\\frac{u_{xi}(t_0+k\\Delta  t)}{R_{xi}}- \\\\\n&-\\frac{A}{2}\\sum_{j=1,j\\neq i}^{N}v_{xj}(t_0+k\\Delta  t) \\\\\n&-\\frac{B}{2}\\sum_{y=1,y\\neq x}^{N}y_{yi}(t_0+k\\Delta  t) \\\\\n&-C[\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}(t_0+k\\Delta  t)-N] \\\\\n&-\\frac{D}{2}\\sum_{y=1,y\\neq x}^{N}d_{xy}[v_{y,i+1}(t_0+k\\Delta  t)+v_{y,i-1}(t_0+k\\Delta  t)]\n\\end{align}</script></li>\n<li>计算新的状态变量<br>将状态变量与上一时刻的状态变量叠加得到新的状态变量。</li>\n<li>计算能量<br>根据新的状态变量和神经元输出，代入网络能量表达式计算得到本次迭代后的能量。</li>\n<li>判断是否满足终止条件<br>当能量值不再变化或者迭代次数达到最大值时，则满足迭代收敛条件。但在实际操作中，能量值很难满足完全不变的要求，为提高求解效率，可计算两次迭代之间的能量变化量，当变化率小于某一阈值时认为能量不变。<br>若满足迭代终止条件，则进入下一步骤，否则返回步骤2继续迭代。</li>\n<li>检查解是否满足要求<br>检查解是否满足输出矩阵为置换矩阵，若不满足要求，则返回步骤1，否则输出求解结果。</li>\n</ol>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p>请见Github：<br><a href=\"https://github.com/linjw1008/TSP_MATLAB\" target=\"_blank\" rel=\"noopener\">https://github.com/linjw1008/TSP_MATLAB</a><br>相关参数可以微调，达到更好的求解效果。</p>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><img src=\"result.bmp\" alt></p>\n","site":{"data":{}},"excerpt":"<p>最近一门人工神经网络的课程结课，利用Matlab做了一个小Project，在此分享。<br>","more":"</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>旅行商问题（Travelling salesman problem, TSP）：给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。它是组合优化中的一个NP困难问题，很难通过枚举法求解，特别是在N较大的时候。但是通过神经网络或者其他启发式算法可以较好地解决该问题。</p>\n<h1 id=\"Hopfield网络\"><a href=\"#Hopfield网络\" class=\"headerlink\" title=\"Hopfield网络\"></a>Hopfield网络</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Hopfield神经网络是一种递归神经网络，由约翰·霍普菲尔德等人在1982年发明。Hopfield网络是一种结合存储系统和二元系统的神经网络，有连续型与离散型之分。TSP问题可用连续型Hopfield网络（Continuous Hopfield Neural Network, CHNN）解决，故本文主要介绍CHNN网络。<br>CHNN可由一些简单的电子线路连接起来实现（Fun Fact：发明CHNN网络的人是搞物理的，网络实验也是在物理元件电路上进行的），如图所示，每个神经元均具有连续时间变化的输出值，并采用具有饱和非线性的运算放大器来模拟神经元的S型单调输入——输出关系。<br><img src=\"circuit.png\" alt><br>对节点数量为N的CHNN网络，其神经元状态变量的动态变化可用下述非线性微分方程组来描述</p>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\n&c_i\\frac{du_i}{dt}=\\sum_{j=1}^{N}T_{ij}v_{j}-\\frac{u_i}{R_i}+I_i, i=1,2,3,......,N\\\\\n&v_i=f_i(u_i), i=1,2,3,......,N\n\\end{align}</script><p>其中，$f(x)$为激励函数，$f(x)=\\frac{1}{2}[1+tanh(\\frac{x}{x_0})]$。<br>定义能量函数</p>\n<script type=\"math/tex; mode=display\">E=-\\frac{1}{2}\\sum_{i=1}^{N}\\sum_{j=1, j\\neq i}^{N}T_{ij}v_iv_j-\\sum_{i=1}^{N}v_iI_i+\\sum_{i=1}^{N}\\frac{1}{R_i}\\int_0^{v_i}f^{-1}(v)dv</script><p>CHNN能量函数的表达形式与物理意义的能量函数一致，用于表征网络状态的变化趋势。</p>\n<h2 id=\"两个结论\"><a href=\"#两个结论\" class=\"headerlink\" title=\"两个结论\"></a>两个结论</h2><p>并有如下结论（详细推导过程不赘述）</p>\n<ul>\n<li>结论1：$\\frac{\\partial E}{\\partial v_i}=-C_i\\frac{\\partial u_i}{\\partial t}$</li>\n<li>结论2：若函数$f(v)$是单调递增且连续的，并有$C<em>i&gt;0，T</em>{ij}=T_{ji}$，则随着网络状态的变化，有$\\frac{\\partial E}{\\partial t}≤0$，当且仅当$\\frac{\\partial v_i}{\\partial t}=0$时，$\\frac{\\partial E}{\\partial t}=0$。</li>\n</ul>\n<h1 id=\"利用CHNN求解TSP问题\"><a href=\"#利用CHNN求解TSP问题\" class=\"headerlink\" title=\"利用CHNN求解TSP问题\"></a>利用CHNN求解TSP问题</h1><h2 id=\"置换矩阵\"><a href=\"#置换矩阵\" class=\"headerlink\" title=\"置换矩阵\"></a>置换矩阵</h2><p>由于问题中要求每个城市要求均需访问一次且不重复，故采用置换矩阵表示路径顺序。</p>\n<ul>\n<li>置换矩阵<br>矩阵的每一行表示一个城市，每一列表示访问的顺序，用元素“1”表示访问，元素“0”表示没有访问。</li>\n</ul>\n<h2 id=\"求解思路\"><a href=\"#求解思路\" class=\"headerlink\" title=\"求解思路\"></a>求解思路</h2><p>基于以上结论，若将最优化问题的目标函数转换成网络的能量函数，把问题变量对应于网络状态，则可将CHNN网络用于解决优化组合问题。<br>在实际求解时，可根据状态方程反推出网络的结构，即$T_{ij}$、$I_i$等参数，然后在确定的网络下进行迭代求解。但当问题较为复杂时，往往比较难通过状态方程反推出网络结构，这时可利用上述重要结论，首先为网络输出赋初值，然后在每次迭代时求出状态方程的增量进行叠加，使网络的输出逐渐收敛。</p>\n<h2 id=\"能量函数\"><a href=\"#能量函数\" class=\"headerlink\" title=\"能量函数\"></a>能量函数</h2><p>TSP问题所用的能量函数可包含约束项和优化项。</p>\n<ul>\n<li>约束项<br>约束项主要保证每个城市均被访问且只能被访问1次，即输出矩阵为置换矩阵。可用数学形式表示如下<script type=\"math/tex; mode=display\">E_1=\\frac{A}{2}\\sum_{x=1}^{N}\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N}v_{xi}v_{xj}\n+\\frac{B}{2}\\sum_{i=1}^{N}\\sum_{x=1}^{N-1}\\sum_{y=x+1}^{N}v_{xi}v_{yi}\n+\\frac{C}{2}(\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N)^2</script></li>\n<li>优化项<br>优化项使得总路程往最小化的方向变化。可表示如下<script type=\"math/tex; mode=display\">E_2=\\frac{D}{2}\\sum_{x=1}^{N}\\sum_{y\\neq x}^{N}\\sum_{i=1}^{N}d_{xy}v_{xi}(v_{y,i+1}+v_{y,i-1})</script></li>\n<li>总能量函数<br>总的能量函数为<script type=\"math/tex; mode=display\">\\begin{align}\nE=&\\frac{A}{2}\\sum_{x=1}^{N}\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N}v_{xi}v_{xj} \\\\\n&+\\frac{B}{2}\\sum_{i=1}^{N}\\sum_{x=1}^{N-1}\\sum_{y=x+1}^{N}v_{xi}v_{yi} \\\\\n&+\\frac{C}{2}(\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N)^2 \\\\\n&+\\frac{D}{2}\\sum_{x=1}^{N}\\sum_{y\\neq x}^{N}\\sum_{i=1}^{N}d_{xy}v_{xi}(v_{y,i+1}+v_{y,i-1}) \\\\\n&+\\sum_{x=1}^{N}\\sum_{i=1}^{N}\\frac{1}{R_{xi}}\\int_0^{v_{xi}}f^{-1}(v)dv\n\\end{align}</script></li>\n</ul>\n<h2 id=\"动态方程\"><a href=\"#动态方程\" class=\"headerlink\" title=\"动态方程\"></a>动态方程</h2><p>根据结论1，可得到以下动态方程，该方程用于每次迭代时更新状态变量。</p>\n<script type=\"math/tex; mode=display\">\\begin{align}\nc_{xi}\\frac{du_{xi}}{dt}&=-\\frac{\\partial E}{\\partial v_{xi}}\\\\\n&=-\\frac{u_{xi}}{R_{xi}}-\\frac{A}{2}\\sum_{j=1,j\\neq i}^{N}v_{xj}-\\frac{B}{2}\\sum_{y=1,y\\neq x}^{N}y_{yi} \\\\\n&-C[\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}-N]-\\frac{D}{2}\\sum_{y=1,y\\neq x}^{N}d_{xy}[v_{y,i+1}+v_{y,i-1}]\n\\end{align}</script><h1 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h1><h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>状态变量初始化<br>首先，按照下式为各状态变量赋随机初值<script type=\"math/tex; mode=display\">u_{xi}(t_0)=\\frac{1}{2}u_0ln(N-1)+\\Delta u_{xi}</script>其中，$\\Delta  u_{xi}$取区间$(-1,+1)$内的随机值。</li>\n<li>计算神经元输出<br>根据激励函数计算神经元的输出<script type=\"math/tex; mode=display\">v_{xi}(t_0+k\\Delta  t)=f[u_{xi}(t_0+k\\Delta t)]=\\frac{1}{2}{1+tanh[\\frac{u_{xi}(t_0+k\\Delta t)}{u_{0}}]}</script></li>\n<li>计算状态变量增量<br>得到神经元的输出后，可继续计算状态变量的增量<script type=\"math/tex; mode=display\">\\begin{align}\nc_{xi}\\frac{du_{xi}}{dt}=&-\\frac{u_{xi}(t_0+k\\Delta  t)}{R_{xi}}- \\\\\n&-\\frac{A}{2}\\sum_{j=1,j\\neq i}^{N}v_{xj}(t_0+k\\Delta  t) \\\\\n&-\\frac{B}{2}\\sum_{y=1,y\\neq x}^{N}y_{yi}(t_0+k\\Delta  t) \\\\\n&-C[\\sum_{x=1}^{N}\\sum_{i=1}^{N}v_{xi}(t_0+k\\Delta  t)-N] \\\\\n&-\\frac{D}{2}\\sum_{y=1,y\\neq x}^{N}d_{xy}[v_{y,i+1}(t_0+k\\Delta  t)+v_{y,i-1}(t_0+k\\Delta  t)]\n\\end{align}</script></li>\n<li>计算新的状态变量<br>将状态变量与上一时刻的状态变量叠加得到新的状态变量。</li>\n<li>计算能量<br>根据新的状态变量和神经元输出，代入网络能量表达式计算得到本次迭代后的能量。</li>\n<li>判断是否满足终止条件<br>当能量值不再变化或者迭代次数达到最大值时，则满足迭代收敛条件。但在实际操作中，能量值很难满足完全不变的要求，为提高求解效率，可计算两次迭代之间的能量变化量，当变化率小于某一阈值时认为能量不变。<br>若满足迭代终止条件，则进入下一步骤，否则返回步骤2继续迭代。</li>\n<li>检查解是否满足要求<br>检查解是否满足输出矩阵为置换矩阵，若不满足要求，则返回步骤1，否则输出求解结果。</li>\n</ol>\n<h2 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h2><p>请见Github：<br><a href=\"https://github.com/linjw1008/TSP_MATLAB\" target=\"_blank\" rel=\"noopener\">https://github.com/linjw1008/TSP_MATLAB</a><br>相关参数可以微调，达到更好的求解效果。</p>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p><img src=\"result.bmp\" alt></p>"},{"title":"windows下Github无法ping通解决方法","date":"2021-01-31T07:19:40.000Z","_content":"# 问题表现\n在windows系统下，`github.com`无法通过浏览器访问，无法在命令提示符（cmd）中ping通。\n<!-- more -->\n\n# 解决方法\n1. 通过域名查询网站，查询`github.com`对应的ip地址。\n* 推荐网站1：https://ip.chinaz.com/github.com\n* 推荐网站2：https://github.com.ipaddress.com/www.github.com\n例如通过chinaz网站查询到`github.com`的ip地址是`52.74.223.119`。\n2. 修改hosts文件\n打开`C:\\Windows\\System32\\drivers\\etc`目录下的hosts文件，在末尾添加如下内容\n```\n52.74.223.119 github.com\n```\n3. 清空DNS缓存\n在cmd中执行`ipconfig /flushdns`命令。\n\n","source":"_posts/2021-01-31-windows下Github无法ping通解决方法.md","raw":"---\ntitle: windows下Github无法ping通解决方法\ndate: 2021-01-31 15:19:40\ntags:\n  - Github\ncategories:\n  - 常见问题排查\n---\n# 问题表现\n在windows系统下，`github.com`无法通过浏览器访问，无法在命令提示符（cmd）中ping通。\n<!-- more -->\n\n# 解决方法\n1. 通过域名查询网站，查询`github.com`对应的ip地址。\n* 推荐网站1：https://ip.chinaz.com/github.com\n* 推荐网站2：https://github.com.ipaddress.com/www.github.com\n例如通过chinaz网站查询到`github.com`的ip地址是`52.74.223.119`。\n2. 修改hosts文件\n打开`C:\\Windows\\System32\\drivers\\etc`目录下的hosts文件，在末尾添加如下内容\n```\n52.74.223.119 github.com\n```\n3. 清空DNS缓存\n在cmd中执行`ipconfig /flushdns`命令。\n\n","slug":"windows下Github无法ping通解决方法","published":1,"updated":"2021-01-31T11:30:08.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkl44zbt000670ud12axj9wj","content":"<h1 id=\"问题表现\"><a href=\"#问题表现\" class=\"headerlink\" title=\"问题表现\"></a>问题表现</h1><p>在windows系统下，<code>github.com</code>无法通过浏览器访问，无法在命令提示符（cmd）中ping通。<br><a id=\"more\"></a></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><ol>\n<li>通过域名查询网站，查询<code>github.com</code>对应的ip地址。</li>\n</ol>\n<ul>\n<li>推荐网站1：<a href=\"https://ip.chinaz.com/github.com\" target=\"_blank\" rel=\"noopener\">https://ip.chinaz.com/github.com</a></li>\n<li>推荐网站2：<a href=\"https://github.com.ipaddress.com/www.github.com\" target=\"_blank\" rel=\"noopener\">https://github.com.ipaddress.com/www.github.com</a><br>例如通过chinaz网站查询到<code>github.com</code>的ip地址是<code>52.74.223.119</code>。</li>\n</ul>\n<ol>\n<li><p>修改hosts文件<br>打开<code>C:\\Windows\\System32\\drivers\\etc</code>目录下的hosts文件，在末尾添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">52.74.223.119 github.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清空DNS缓存<br>在cmd中执行<code>ipconfig /flushdns</code>命令。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"问题表现\"><a href=\"#问题表现\" class=\"headerlink\" title=\"问题表现\"></a>问题表现</h1><p>在windows系统下，<code>github.com</code>无法通过浏览器访问，无法在命令提示符（cmd）中ping通。<br>","more":"</p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><ol>\n<li>通过域名查询网站，查询<code>github.com</code>对应的ip地址。</li>\n</ol>\n<ul>\n<li>推荐网站1：<a href=\"https://ip.chinaz.com/github.com\" target=\"_blank\" rel=\"noopener\">https://ip.chinaz.com/github.com</a></li>\n<li>推荐网站2：<a href=\"https://github.com.ipaddress.com/www.github.com\" target=\"_blank\" rel=\"noopener\">https://github.com.ipaddress.com/www.github.com</a><br>例如通过chinaz网站查询到<code>github.com</code>的ip地址是<code>52.74.223.119</code>。</li>\n</ul>\n<ol>\n<li><p>修改hosts文件<br>打开<code>C:\\Windows\\System32\\drivers\\etc</code>目录下的hosts文件，在末尾添加如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">52.74.223.119 github.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清空DNS缓存<br>在cmd中执行<code>ipconfig /flushdns</code>命令。</p>\n</li>\n</ol>"},{"title":"迪杰斯特拉（dijkstra）算法的C++实现","date":"2021-01-31T11:29:10.000Z","_content":"# 简介\n迪杰斯特拉算法是由荷兰计算机科学家艾兹赫尔·戴克斯特拉在1956年发现的、使用类似广度优先搜索的方法解决赋权图的单源最短路径问题的算法。\n# 算法实现\n迪杰斯特拉算法主要有两种实现方式。两种实现方式的不同在于图的表示方法，分别为邻接矩阵法与邻接表法。\n<!-- more -->\n## 邻接矩阵法\n```cpp\n/**\n输入参数\nn：       节点数量\ns：       起点编号\nG：       图的邻接矩阵，G[m][n]表示节点m到节点n的权重，若G[m][n]=INT_MAX，表示m与n之间无连接\nvisited： 记录某个节点是否已经被访问\nd：       记录从起点出发到各个节点的最短路径。除了起点之外，均初始化为INT_MAX\npre：     记录达到某个节点之前经过的节点\n*/\nvoid dijkstra(int n, int s, vector<vector<int>> G, vector<bool>& visited, vector<int>& d, vector<int>& pre) {\n    for (int i = 0; i < n; ++i) pre[i] = i; // 前一个节点初始化为自身\n    d[s] = 0; // 起点到达它自身的最短路径为0\n    // 一共需要操作n次\n    for (int i = 0; i < n; ++i) {\n        int node = -1, min_dist = INT_MAX;\n        // 选出本次要被操作的节点，选取要求是没有被访问过且距离起点的距离最小\n        for (int j = 0; j < n; ++j) {\n            if (!visited[j] && d[j] < min_dist) {    \n                node = j;\n                min_dist = d[j];\n            }\n        }\n        if (node == -1) return; // 如果没有可以操作的节点了，直接返回\n        visited[node] = true; // 把当前要操作的节点设置为已经访问\n        // 对于选到的节点，更新经过它到达其他节点时，其他节点距离起点的最短路径\n        for (int j = 0; j < n; ++j) {\n            if (!visited[j] && d[node] + (long)G[node][j] < (long)d[j]) {\n                d[j] = d[node] + G[node][j];\n                pre[j] = node;\n            }\n        }\n    }\n}\n```\n## 邻接表法\n```cpp\n/**\n比较函数，用于后面出现的小顶堆\n*/\nstruct cmp {\n    bool operator()(pair<int, int>& p1, pair<int, int>& p2) {\n        return p1.first > p2.first;\n    }\n};\n\n/**\n输入参数\nn：       节点数量\ns：       起点编号\nG：       图的邻接表，G[m]是与节点m相连接的节点列表，每个节点用pair<int, int>表示，pair的第一个元素为节点编号，第二个元素为与节点相连的边的权重\nvisited： 记录某个节点是否已经被访问\nd：       记录从起点出发到各个节点的最短路径。除了起点之外，均初始化为INT_MAX\npre：     记录达到某个节点之前经过的节点\n*/\nvoid dijkstra2(int n, int s, vector<vector<pair<int, int>>>& G, vector<bool>& visited, vector<int>& d, vector<int>& pre) {\n    for (int i = 0; i < n; ++i) d[i] = (i == s ? 0 : INT_MAX);\n    priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> Q; //初始化一个小顶堆，小顶堆的比较基准是两个不同节点到起点的距离大小\n    Q.push(make_pair(d[s], s)); // 初始状态下，压入起点\n    while (!Q.empty()) {\n        // 选取本次操作的节点，选取要求是没有被访问过且距离起点的距离最小\n        int node = Q.top().second;\n        Q.pop();\n        if (visited[node]) continue;\n        visited[node] = true; // 把选取到的节点标记为已经访问\n        // 对于正在操作的节点，遍历它的邻接点，更新经过它到达邻接点时，邻接点距离起点的最短路径\n        for (int i = 0; i < G[node].size(); ++i) {\n            int neighbor = G[node][i].first; // 邻接点的编号\n            int neighborD = G[node][i].second; // 正在操作的节点距离邻接点的距离\n            if (neighborD + d[node] < d[neighbor]) { // 判断邻接点距离起点是否有更小的路径，若有则更新\n                d[neighbor] = neighborD + d[node];\n                pre[neighbor] = node;\n                Q.push(make_pair(d[neighbor], neighbor));\n            }\n        }\n    }\n}\n```\n# 参考资料\n* [戴克斯特拉算法- 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95)","source":"_posts/2021-01-31-迪杰斯特拉（dijkstra）算法的C-实现.md","raw":"---\ntitle: 迪杰斯特拉（dijkstra）算法的C++实现\ndate: 2021-01-31 19:29:10\ntags:\n  - 数据结构与算法\ncategories:\n  - 学习笔记\n---\n# 简介\n迪杰斯特拉算法是由荷兰计算机科学家艾兹赫尔·戴克斯特拉在1956年发现的、使用类似广度优先搜索的方法解决赋权图的单源最短路径问题的算法。\n# 算法实现\n迪杰斯特拉算法主要有两种实现方式。两种实现方式的不同在于图的表示方法，分别为邻接矩阵法与邻接表法。\n<!-- more -->\n## 邻接矩阵法\n```cpp\n/**\n输入参数\nn：       节点数量\ns：       起点编号\nG：       图的邻接矩阵，G[m][n]表示节点m到节点n的权重，若G[m][n]=INT_MAX，表示m与n之间无连接\nvisited： 记录某个节点是否已经被访问\nd：       记录从起点出发到各个节点的最短路径。除了起点之外，均初始化为INT_MAX\npre：     记录达到某个节点之前经过的节点\n*/\nvoid dijkstra(int n, int s, vector<vector<int>> G, vector<bool>& visited, vector<int>& d, vector<int>& pre) {\n    for (int i = 0; i < n; ++i) pre[i] = i; // 前一个节点初始化为自身\n    d[s] = 0; // 起点到达它自身的最短路径为0\n    // 一共需要操作n次\n    for (int i = 0; i < n; ++i) {\n        int node = -1, min_dist = INT_MAX;\n        // 选出本次要被操作的节点，选取要求是没有被访问过且距离起点的距离最小\n        for (int j = 0; j < n; ++j) {\n            if (!visited[j] && d[j] < min_dist) {    \n                node = j;\n                min_dist = d[j];\n            }\n        }\n        if (node == -1) return; // 如果没有可以操作的节点了，直接返回\n        visited[node] = true; // 把当前要操作的节点设置为已经访问\n        // 对于选到的节点，更新经过它到达其他节点时，其他节点距离起点的最短路径\n        for (int j = 0; j < n; ++j) {\n            if (!visited[j] && d[node] + (long)G[node][j] < (long)d[j]) {\n                d[j] = d[node] + G[node][j];\n                pre[j] = node;\n            }\n        }\n    }\n}\n```\n## 邻接表法\n```cpp\n/**\n比较函数，用于后面出现的小顶堆\n*/\nstruct cmp {\n    bool operator()(pair<int, int>& p1, pair<int, int>& p2) {\n        return p1.first > p2.first;\n    }\n};\n\n/**\n输入参数\nn：       节点数量\ns：       起点编号\nG：       图的邻接表，G[m]是与节点m相连接的节点列表，每个节点用pair<int, int>表示，pair的第一个元素为节点编号，第二个元素为与节点相连的边的权重\nvisited： 记录某个节点是否已经被访问\nd：       记录从起点出发到各个节点的最短路径。除了起点之外，均初始化为INT_MAX\npre：     记录达到某个节点之前经过的节点\n*/\nvoid dijkstra2(int n, int s, vector<vector<pair<int, int>>>& G, vector<bool>& visited, vector<int>& d, vector<int>& pre) {\n    for (int i = 0; i < n; ++i) d[i] = (i == s ? 0 : INT_MAX);\n    priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> Q; //初始化一个小顶堆，小顶堆的比较基准是两个不同节点到起点的距离大小\n    Q.push(make_pair(d[s], s)); // 初始状态下，压入起点\n    while (!Q.empty()) {\n        // 选取本次操作的节点，选取要求是没有被访问过且距离起点的距离最小\n        int node = Q.top().second;\n        Q.pop();\n        if (visited[node]) continue;\n        visited[node] = true; // 把选取到的节点标记为已经访问\n        // 对于正在操作的节点，遍历它的邻接点，更新经过它到达邻接点时，邻接点距离起点的最短路径\n        for (int i = 0; i < G[node].size(); ++i) {\n            int neighbor = G[node][i].first; // 邻接点的编号\n            int neighborD = G[node][i].second; // 正在操作的节点距离邻接点的距离\n            if (neighborD + d[node] < d[neighbor]) { // 判断邻接点距离起点是否有更小的路径，若有则更新\n                d[neighbor] = neighborD + d[node];\n                pre[neighbor] = node;\n                Q.push(make_pair(d[neighbor], neighbor));\n            }\n        }\n    }\n}\n```\n# 参考资料\n* [戴克斯特拉算法- 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95)","slug":"迪杰斯特拉（dijkstra）算法的C-实现","published":1,"updated":"2021-01-31T12:19:35.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkl44zca000a70ud1nkwi3hu","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>迪杰斯特拉算法是由荷兰计算机科学家艾兹赫尔·戴克斯特拉在1956年发现的、使用类似广度优先搜索的方法解决赋权图的单源最短路径问题的算法。</p>\n<h1 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h1><p>迪杰斯特拉算法主要有两种实现方式。两种实现方式的不同在于图的表示方法，分别为邻接矩阵法与邻接表法。<br><a id=\"more\"></a></p>\n<h2 id=\"邻接矩阵法\"><a href=\"#邻接矩阵法\" class=\"headerlink\" title=\"邻接矩阵法\"></a>邻接矩阵法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">输入参数</span></span><br><span class=\"line\"><span class=\"comment\">n：       节点数量</span></span><br><span class=\"line\"><span class=\"comment\">s：       起点编号</span></span><br><span class=\"line\"><span class=\"comment\">G：       图的邻接矩阵，G[m][n]表示节点m到节点n的权重，若G[m][n]=INT_MAX，表示m与n之间无连接</span></span><br><span class=\"line\"><span class=\"comment\">visited： 记录某个节点是否已经被访问</span></span><br><span class=\"line\"><span class=\"comment\">d：       记录从起点出发到各个节点的最短路径。除了起点之外，均初始化为INT_MAX</span></span><br><span class=\"line\"><span class=\"comment\">pre：     记录达到某个节点之前经过的节点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; G, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;&amp; visited, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; pre)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) pre[i] = i; <span class=\"comment\">// 前一个节点初始化为自身</span></span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>; <span class=\"comment\">// 起点到达它自身的最短路径为0</span></span><br><span class=\"line\">    <span class=\"comment\">// 一共需要操作n次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = <span class=\"number\">-1</span>, min_dist = INT_MAX;</span><br><span class=\"line\">        <span class=\"comment\">// 选出本次要被操作的节点，选取要求是没有被访问过且距离起点的距离最小</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[j] &amp;&amp; d[j] &lt; min_dist) &#123;    </span><br><span class=\"line\">                node = j;</span><br><span class=\"line\">                min_dist = d[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">// 如果没有可以操作的节点了，直接返回</span></span><br><span class=\"line\">        visited[node] = <span class=\"literal\">true</span>; <span class=\"comment\">// 把当前要操作的节点设置为已经访问</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于选到的节点，更新经过它到达其他节点时，其他节点距离起点的最短路径</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[j] &amp;&amp; d[node] + (<span class=\"keyword\">long</span>)G[node][j] &lt; (<span class=\"keyword\">long</span>)d[j]) &#123;</span><br><span class=\"line\">                d[j] = d[node] + G[node][j];</span><br><span class=\"line\">                pre[j] = node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"邻接表法\"><a href=\"#邻接表法\" class=\"headerlink\" title=\"邻接表法\"></a>邻接表法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">比较函数，用于后面出现的小顶堆</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&amp; p1, pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&amp; p2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1.first &gt; p2.first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">输入参数</span></span><br><span class=\"line\"><span class=\"comment\">n：       节点数量</span></span><br><span class=\"line\"><span class=\"comment\">s：       起点编号</span></span><br><span class=\"line\"><span class=\"comment\">G：       图的邻接表，G[m]是与节点m相连接的节点列表，每个节点用pair&lt;int, int&gt;表示，pair的第一个元素为节点编号，第二个元素为与节点相连的边的权重</span></span><br><span class=\"line\"><span class=\"comment\">visited： 记录某个节点是否已经被访问</span></span><br><span class=\"line\"><span class=\"comment\">d：       记录从起点出发到各个节点的最短路径。除了起点之外，均初始化为INT_MAX</span></span><br><span class=\"line\"><span class=\"comment\">pre：     记录达到某个节点之前经过的节点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra2</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt;&gt;&amp; G, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;&amp; visited, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; pre)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) d[i] = (i == s ? <span class=\"number\">0</span> : INT_MAX);</span><br><span class=\"line\">    priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;, <span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt;, cmp&gt; Q; <span class=\"comment\">//初始化一个小顶堆，小顶堆的比较基准是两个不同节点到起点的距离大小</span></span><br><span class=\"line\">    Q.push(make_pair(d[s], s)); <span class=\"comment\">// 初始状态下，压入起点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 选取本次操作的节点，选取要求是没有被访问过且距离起点的距离最小</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = Q.top().second;</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (visited[node]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        visited[node] = <span class=\"literal\">true</span>; <span class=\"comment\">// 把选取到的节点标记为已经访问</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于正在操作的节点，遍历它的邻接点，更新经过它到达邻接点时，邻接点距离起点的最短路径</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[node].size(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> neighbor = G[node][i].first; <span class=\"comment\">// 邻接点的编号</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> neighborD = G[node][i].second; <span class=\"comment\">// 正在操作的节点距离邻接点的距离</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (neighborD + d[node] &lt; d[neighbor]) &#123; <span class=\"comment\">// 判断邻接点距离起点是否有更小的路径，若有则更新</span></span><br><span class=\"line\">                d[neighbor] = neighborD + d[node];</span><br><span class=\"line\">                pre[neighbor] = node;</span><br><span class=\"line\">                Q.push(make_pair(d[neighbor], neighbor));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">戴克斯特拉算法- 维基百科，自由的百科全书</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>迪杰斯特拉算法是由荷兰计算机科学家艾兹赫尔·戴克斯特拉在1956年发现的、使用类似广度优先搜索的方法解决赋权图的单源最短路径问题的算法。</p>\n<h1 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h1><p>迪杰斯特拉算法主要有两种实现方式。两种实现方式的不同在于图的表示方法，分别为邻接矩阵法与邻接表法。<br>","more":"</p>\n<h2 id=\"邻接矩阵法\"><a href=\"#邻接矩阵法\" class=\"headerlink\" title=\"邻接矩阵法\"></a>邻接矩阵法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">输入参数</span></span><br><span class=\"line\"><span class=\"comment\">n：       节点数量</span></span><br><span class=\"line\"><span class=\"comment\">s：       起点编号</span></span><br><span class=\"line\"><span class=\"comment\">G：       图的邻接矩阵，G[m][n]表示节点m到节点n的权重，若G[m][n]=INT_MAX，表示m与n之间无连接</span></span><br><span class=\"line\"><span class=\"comment\">visited： 记录某个节点是否已经被访问</span></span><br><span class=\"line\"><span class=\"comment\">d：       记录从起点出发到各个节点的最短路径。除了起点之外，均初始化为INT_MAX</span></span><br><span class=\"line\"><span class=\"comment\">pre：     记录达到某个节点之前经过的节点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; G, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;&amp; visited, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; pre)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) pre[i] = i; <span class=\"comment\">// 前一个节点初始化为自身</span></span><br><span class=\"line\">    d[s] = <span class=\"number\">0</span>; <span class=\"comment\">// 起点到达它自身的最短路径为0</span></span><br><span class=\"line\">    <span class=\"comment\">// 一共需要操作n次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = <span class=\"number\">-1</span>, min_dist = INT_MAX;</span><br><span class=\"line\">        <span class=\"comment\">// 选出本次要被操作的节点，选取要求是没有被访问过且距离起点的距离最小</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[j] &amp;&amp; d[j] &lt; min_dist) &#123;    </span><br><span class=\"line\">                node = j;</span><br><span class=\"line\">                min_dist = d[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">// 如果没有可以操作的节点了，直接返回</span></span><br><span class=\"line\">        visited[node] = <span class=\"literal\">true</span>; <span class=\"comment\">// 把当前要操作的节点设置为已经访问</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于选到的节点，更新经过它到达其他节点时，其他节点距离起点的最短路径</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[j] &amp;&amp; d[node] + (<span class=\"keyword\">long</span>)G[node][j] &lt; (<span class=\"keyword\">long</span>)d[j]) &#123;</span><br><span class=\"line\">                d[j] = d[node] + G[node][j];</span><br><span class=\"line\">                pre[j] = node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"邻接表法\"><a href=\"#邻接表法\" class=\"headerlink\" title=\"邻接表法\"></a>邻接表法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">比较函数，用于后面出现的小顶堆</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&amp; p1, pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&amp; p2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1.first &gt; p2.first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">输入参数</span></span><br><span class=\"line\"><span class=\"comment\">n：       节点数量</span></span><br><span class=\"line\"><span class=\"comment\">s：       起点编号</span></span><br><span class=\"line\"><span class=\"comment\">G：       图的邻接表，G[m]是与节点m相连接的节点列表，每个节点用pair&lt;int, int&gt;表示，pair的第一个元素为节点编号，第二个元素为与节点相连的边的权重</span></span><br><span class=\"line\"><span class=\"comment\">visited： 记录某个节点是否已经被访问</span></span><br><span class=\"line\"><span class=\"comment\">d：       记录从起点出发到各个节点的最短路径。除了起点之外，均初始化为INT_MAX</span></span><br><span class=\"line\"><span class=\"comment\">pre：     记录达到某个节点之前经过的节点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra2</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt;&gt;&amp; G, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;&amp; visited, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; pre)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) d[i] = (i == s ? <span class=\"number\">0</span> : INT_MAX);</span><br><span class=\"line\">    priority_queue&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;, <span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt;, cmp&gt; Q; <span class=\"comment\">//初始化一个小顶堆，小顶堆的比较基准是两个不同节点到起点的距离大小</span></span><br><span class=\"line\">    Q.push(make_pair(d[s], s)); <span class=\"comment\">// 初始状态下，压入起点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 选取本次操作的节点，选取要求是没有被访问过且距离起点的距离最小</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> node = Q.top().second;</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (visited[node]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        visited[node] = <span class=\"literal\">true</span>; <span class=\"comment\">// 把选取到的节点标记为已经访问</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于正在操作的节点，遍历它的邻接点，更新经过它到达邻接点时，邻接点距离起点的最短路径</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[node].size(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> neighbor = G[node][i].first; <span class=\"comment\">// 邻接点的编号</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> neighborD = G[node][i].second; <span class=\"comment\">// 正在操作的节点距离邻接点的距离</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (neighborD + d[node] &lt; d[neighbor]) &#123; <span class=\"comment\">// 判断邻接点距离起点是否有更小的路径，若有则更新</span></span><br><span class=\"line\">                d[neighbor] = neighborD + d[node];</span><br><span class=\"line\">                pre[neighbor] = node;</span><br><span class=\"line\">                Q.push(make_pair(d[neighbor], neighbor));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">戴克斯特拉算法- 维基百科，自由的百科全书</a></li>\n</ul>"},{"title":"并查集代码实现+详细注释（C++）","date":"2021-01-25T14:04:53.000Z","_content":"# 问题定义\n并查集是一种树型的数据结构，用于处理一些不交集的合并及查询问题。\n有两种操作并查集的操作。一是Find（查找），用于确定某个元素属于哪个子集；二是Union（联合），用于将两个子集合并成一个集合。上述两种算法也称为联合-查找算法。\n<!-- more -->\n# 算法\n对于并查集，需要解决两个问题，数据结构的表示方法以及联合-查找算法的具体实现。\n## 数据结构\n首先需要明确的有\n* 在并查集中可能有多个子集，每个子集形成一个树形结构。通过树形结构的根节点来区分子集，每个根节点与子集一一对应。\n* 对于每一个节点，我们只关心这个节点本身，以及它的祖先节点。其中祖先节点的作用是标记某个节点属于哪一个子集。\n\n因此一般可以用一维数组来表示并查集。\n* 数组的每一个元素对应一个节点。\n* 元素的下标用于区分节点，元素的值用于表示对应节点的祖先节点，也即表示了节点属于哪一个子集。\n* 根节点的父节点是它本身。\n* 初始状态下，并查集的节点之间没有亲缘关系，即每个节点的初始根节点都是它本身。\n\n举例：设数组F。若有F[a] = b，则表示节点a的祖先节点是b。\n## 查找算法\n作用：给定某个节点，查找该节点的根节点。\n### 方法一：普通算法\n对于每个节点，我们可以知道该节点的祖先节点，从该节点的祖先节点出发，不断向上寻找，直到根节点。可用递归实现。\n方法一较为简单，但是在树的深度较大时，寻找的路径较长，且每次查找同一个节点均需重复遍历相同的路径，时间复杂度较高。由于查找算法的最终目的是获取根节点，即不关心查找路径中的其它节点，故可以设法对查找路径进行压缩。\n### 方法二：带路径压缩的算法\n在方法一的基础上进行改进，同样采用递归的方式获取根节点，但是获取到根节点后不直接返回，而是先将被查询节点的祖先节点设置为根节点，然后再返回。这样下次再查询相同节点时，便可直接找到根节点，起到路径压缩的作用。\n举例：被查找的节点为a，其祖先节点为b，查找到根节点r，则将a的祖先节点直接设置为r，即F[a] = r，然后再返回根节点r。\n## 联合算法\n作用：给定节点a和节点b，将节点a所在的子集和节点b所在的子集合并为一个集合。\n### 方法一：普通算法\n先利用查找算法分别找到节点a和b的根节点rootA和rootB。然后将其中一个根节点设置为另一个根节点的子节点，即F[rootA]=rootB（将rootA设置为rootB的子节点）或F[rootB]=rootA（将rootB设置为rootA的子节点）。\n方法一中，对于将哪一个根节点作为子节点并无要求，这样的话就可能出现深度较大的子集合并到深度较小的子集的情况，导致新集合的深度更大，从而增大了查找路径。\n### 方法二：按秩合并的算法\n新增一个数组rank，用于记录每个节点的深度（秩）。同样先利用查找算法找到根节点，然后比较两个根节点的深度，将深度较小的根节点作为另一个根节点的子节点。合并完成后再相应地更新rank数组。\n# C++实现\n## 普通算法\n```cpp\n#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nclass UnionFind {\nprivate:\n    vector<int> father;\n\npublic:\n    UnionFind(int n) {\n        // 初始化，将每个节点的根节点设置为它本身，即每个节点都代表一个独立的子集\n        father.resize(n);\n        for (int i = 0; i < n; ++i) father[i] = i;\n    }\n\n    int find(int x) {\n        if (x == father[x]) return x; // 找到根节点，直接返回\n        return find(father[x]); // 未找到根节点，继续向上递归\n    }\n\n    void merge(int a, int b) {\n        int rootOfA = find(a), rootOfB = find(b); // 分别找到两个节点的根节点\n        father[rootOfA] = rootOfB; // 将其中一个根节点设置为另一个的子节点\n    }\n};\n```\n## 路径压缩算法\n这里只展示`int find(int x)`方法的实现。\n```cpp\nint find(int x) {\n    if (x == father[x]) return x; // 找到根节点，直接返回\n    father[x] = find(father[x]); // 未找到根节点，继续向上递归，找到根节点后进行路径压缩\n    return father[x];\n}\n```\n## 按秩合并算法\n这里只展示与普通算法的不同。\n```cpp\n#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nclass UnionFind {\nprivate:\n    vector<int> father;\n    vector<int> rank;\n\npublic:\n    UnionFind(int n) {\n        // 初始化，将每个节点的根节点设置为它本身，即每个节点都代表一个独立的子集。并将每个节点的秩都设置为1\n        father.resize(n);\n        for (int i = 0; i < n; ++i) father[i] = i;\n        rank.resize(n, 1);\n    }\n\n    // 省略.....\n\n    void merge(int a, int b) {\n        int rootOfA = find(a), rootOfB = find(b); // 分别找到两个节点的根节点\n        if (rank[rootOfA] <= rank[rootOfB]) father[rootOfA] = rootOfB; // rootA的秩较小，将它作为rootB的子节点\n        else father[rootOfB] = rootOfA; // 反之将rootB作为rootA的子节点\n        if (rank[rootOfA] == rank[rootOfB]) rank[rootOfB]++; // 如果秩相同，必定有其中一个根节点的秩增大，这里根据24行的具体实现可知是节点rootB的秩增大\n    }\n};\n```\n# 应用\n* [LeetCode 959. 由斜杠划分区域](https://leetcode-cn.com/problems/regions-cut-by-slashes/)\n\n# 参考资料\n1. [算法学习笔记(1) : 并查集](https://zhuanlan.zhihu.com/p/93647900)\n2. [并查集- 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86)","source":"_posts/2021-01-25-并查集代码实现-详细注释（C-）.md","raw":"---\ntitle: 并查集代码实现+详细注释（C++）\ndate: 2021-01-25 22:04:53\ntags:\n  - 数据结构与算法\ncategories:\n  - 学习笔记\n---\n# 问题定义\n并查集是一种树型的数据结构，用于处理一些不交集的合并及查询问题。\n有两种操作并查集的操作。一是Find（查找），用于确定某个元素属于哪个子集；二是Union（联合），用于将两个子集合并成一个集合。上述两种算法也称为联合-查找算法。\n<!-- more -->\n# 算法\n对于并查集，需要解决两个问题，数据结构的表示方法以及联合-查找算法的具体实现。\n## 数据结构\n首先需要明确的有\n* 在并查集中可能有多个子集，每个子集形成一个树形结构。通过树形结构的根节点来区分子集，每个根节点与子集一一对应。\n* 对于每一个节点，我们只关心这个节点本身，以及它的祖先节点。其中祖先节点的作用是标记某个节点属于哪一个子集。\n\n因此一般可以用一维数组来表示并查集。\n* 数组的每一个元素对应一个节点。\n* 元素的下标用于区分节点，元素的值用于表示对应节点的祖先节点，也即表示了节点属于哪一个子集。\n* 根节点的父节点是它本身。\n* 初始状态下，并查集的节点之间没有亲缘关系，即每个节点的初始根节点都是它本身。\n\n举例：设数组F。若有F[a] = b，则表示节点a的祖先节点是b。\n## 查找算法\n作用：给定某个节点，查找该节点的根节点。\n### 方法一：普通算法\n对于每个节点，我们可以知道该节点的祖先节点，从该节点的祖先节点出发，不断向上寻找，直到根节点。可用递归实现。\n方法一较为简单，但是在树的深度较大时，寻找的路径较长，且每次查找同一个节点均需重复遍历相同的路径，时间复杂度较高。由于查找算法的最终目的是获取根节点，即不关心查找路径中的其它节点，故可以设法对查找路径进行压缩。\n### 方法二：带路径压缩的算法\n在方法一的基础上进行改进，同样采用递归的方式获取根节点，但是获取到根节点后不直接返回，而是先将被查询节点的祖先节点设置为根节点，然后再返回。这样下次再查询相同节点时，便可直接找到根节点，起到路径压缩的作用。\n举例：被查找的节点为a，其祖先节点为b，查找到根节点r，则将a的祖先节点直接设置为r，即F[a] = r，然后再返回根节点r。\n## 联合算法\n作用：给定节点a和节点b，将节点a所在的子集和节点b所在的子集合并为一个集合。\n### 方法一：普通算法\n先利用查找算法分别找到节点a和b的根节点rootA和rootB。然后将其中一个根节点设置为另一个根节点的子节点，即F[rootA]=rootB（将rootA设置为rootB的子节点）或F[rootB]=rootA（将rootB设置为rootA的子节点）。\n方法一中，对于将哪一个根节点作为子节点并无要求，这样的话就可能出现深度较大的子集合并到深度较小的子集的情况，导致新集合的深度更大，从而增大了查找路径。\n### 方法二：按秩合并的算法\n新增一个数组rank，用于记录每个节点的深度（秩）。同样先利用查找算法找到根节点，然后比较两个根节点的深度，将深度较小的根节点作为另一个根节点的子节点。合并完成后再相应地更新rank数组。\n# C++实现\n## 普通算法\n```cpp\n#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nclass UnionFind {\nprivate:\n    vector<int> father;\n\npublic:\n    UnionFind(int n) {\n        // 初始化，将每个节点的根节点设置为它本身，即每个节点都代表一个独立的子集\n        father.resize(n);\n        for (int i = 0; i < n; ++i) father[i] = i;\n    }\n\n    int find(int x) {\n        if (x == father[x]) return x; // 找到根节点，直接返回\n        return find(father[x]); // 未找到根节点，继续向上递归\n    }\n\n    void merge(int a, int b) {\n        int rootOfA = find(a), rootOfB = find(b); // 分别找到两个节点的根节点\n        father[rootOfA] = rootOfB; // 将其中一个根节点设置为另一个的子节点\n    }\n};\n```\n## 路径压缩算法\n这里只展示`int find(int x)`方法的实现。\n```cpp\nint find(int x) {\n    if (x == father[x]) return x; // 找到根节点，直接返回\n    father[x] = find(father[x]); // 未找到根节点，继续向上递归，找到根节点后进行路径压缩\n    return father[x];\n}\n```\n## 按秩合并算法\n这里只展示与普通算法的不同。\n```cpp\n#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nclass UnionFind {\nprivate:\n    vector<int> father;\n    vector<int> rank;\n\npublic:\n    UnionFind(int n) {\n        // 初始化，将每个节点的根节点设置为它本身，即每个节点都代表一个独立的子集。并将每个节点的秩都设置为1\n        father.resize(n);\n        for (int i = 0; i < n; ++i) father[i] = i;\n        rank.resize(n, 1);\n    }\n\n    // 省略.....\n\n    void merge(int a, int b) {\n        int rootOfA = find(a), rootOfB = find(b); // 分别找到两个节点的根节点\n        if (rank[rootOfA] <= rank[rootOfB]) father[rootOfA] = rootOfB; // rootA的秩较小，将它作为rootB的子节点\n        else father[rootOfB] = rootOfA; // 反之将rootB作为rootA的子节点\n        if (rank[rootOfA] == rank[rootOfB]) rank[rootOfB]++; // 如果秩相同，必定有其中一个根节点的秩增大，这里根据24行的具体实现可知是节点rootB的秩增大\n    }\n};\n```\n# 应用\n* [LeetCode 959. 由斜杠划分区域](https://leetcode-cn.com/problems/regions-cut-by-slashes/)\n\n# 参考资料\n1. [算法学习笔记(1) : 并查集](https://zhuanlan.zhihu.com/p/93647900)\n2. [并查集- 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86)","slug":"并查集代码实现-详细注释（C-）","published":1,"updated":"2021-01-31T06:38:17.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkl44zcg000b70udsclw4pnu","content":"<h1 id=\"问题定义\"><a href=\"#问题定义\" class=\"headerlink\" title=\"问题定义\"></a>问题定义</h1><p>并查集是一种树型的数据结构，用于处理一些不交集的合并及查询问题。<br>有两种操作并查集的操作。一是Find（查找），用于确定某个元素属于哪个子集；二是Union（联合），用于将两个子集合并成一个集合。上述两种算法也称为联合-查找算法。<br><a id=\"more\"></a></p>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><p>对于并查集，需要解决两个问题，数据结构的表示方法以及联合-查找算法的具体实现。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>首先需要明确的有</p>\n<ul>\n<li>在并查集中可能有多个子集，每个子集形成一个树形结构。通过树形结构的根节点来区分子集，每个根节点与子集一一对应。</li>\n<li>对于每一个节点，我们只关心这个节点本身，以及它的祖先节点。其中祖先节点的作用是标记某个节点属于哪一个子集。</li>\n</ul>\n<p>因此一般可以用一维数组来表示并查集。</p>\n<ul>\n<li>数组的每一个元素对应一个节点。</li>\n<li>元素的下标用于区分节点，元素的值用于表示对应节点的祖先节点，也即表示了节点属于哪一个子集。</li>\n<li>根节点的父节点是它本身。</li>\n<li>初始状态下，并查集的节点之间没有亲缘关系，即每个节点的初始根节点都是它本身。</li>\n</ul>\n<p>举例：设数组F。若有F[a] = b，则表示节点a的祖先节点是b。</p>\n<h2 id=\"查找算法\"><a href=\"#查找算法\" class=\"headerlink\" title=\"查找算法\"></a>查找算法</h2><p>作用：给定某个节点，查找该节点的根节点。</p>\n<h3 id=\"方法一：普通算法\"><a href=\"#方法一：普通算法\" class=\"headerlink\" title=\"方法一：普通算法\"></a>方法一：普通算法</h3><p>对于每个节点，我们可以知道该节点的祖先节点，从该节点的祖先节点出发，不断向上寻找，直到根节点。可用递归实现。<br>方法一较为简单，但是在树的深度较大时，寻找的路径较长，且每次查找同一个节点均需重复遍历相同的路径，时间复杂度较高。由于查找算法的最终目的是获取根节点，即不关心查找路径中的其它节点，故可以设法对查找路径进行压缩。</p>\n<h3 id=\"方法二：带路径压缩的算法\"><a href=\"#方法二：带路径压缩的算法\" class=\"headerlink\" title=\"方法二：带路径压缩的算法\"></a>方法二：带路径压缩的算法</h3><p>在方法一的基础上进行改进，同样采用递归的方式获取根节点，但是获取到根节点后不直接返回，而是先将被查询节点的祖先节点设置为根节点，然后再返回。这样下次再查询相同节点时，便可直接找到根节点，起到路径压缩的作用。<br>举例：被查找的节点为a，其祖先节点为b，查找到根节点r，则将a的祖先节点直接设置为r，即F[a] = r，然后再返回根节点r。</p>\n<h2 id=\"联合算法\"><a href=\"#联合算法\" class=\"headerlink\" title=\"联合算法\"></a>联合算法</h2><p>作用：给定节点a和节点b，将节点a所在的子集和节点b所在的子集合并为一个集合。</p>\n<h3 id=\"方法一：普通算法-1\"><a href=\"#方法一：普通算法-1\" class=\"headerlink\" title=\"方法一：普通算法\"></a>方法一：普通算法</h3><p>先利用查找算法分别找到节点a和b的根节点rootA和rootB。然后将其中一个根节点设置为另一个根节点的子节点，即F[rootA]=rootB（将rootA设置为rootB的子节点）或F[rootB]=rootA（将rootB设置为rootA的子节点）。<br>方法一中，对于将哪一个根节点作为子节点并无要求，这样的话就可能出现深度较大的子集合并到深度较小的子集的情况，导致新集合的深度更大，从而增大了查找路径。</p>\n<h3 id=\"方法二：按秩合并的算法\"><a href=\"#方法二：按秩合并的算法\" class=\"headerlink\" title=\"方法二：按秩合并的算法\"></a>方法二：按秩合并的算法</h3><p>新增一个数组rank，用于记录每个节点的深度（秩）。同样先利用查找算法找到根节点，然后比较两个根节点的深度，将深度较小的根节点作为另一个根节点的子节点。合并完成后再相应地更新rank数组。</p>\n<h1 id=\"C-实现\"><a href=\"#C-实现\" class=\"headerlink\" title=\"C++实现\"></a>C++实现</h1><h2 id=\"普通算法\"><a href=\"#普通算法\" class=\"headerlink\" title=\"普通算法\"></a>普通算法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; father;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    UnionFind(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化，将每个节点的根节点设置为它本身，即每个节点都代表一个独立的子集</span></span><br><span class=\"line\">        father.resize(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) father[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == father[x]) <span class=\"keyword\">return</span> x; <span class=\"comment\">// 找到根节点，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(father[x]); <span class=\"comment\">// 未找到根节点，继续向上递归</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootOfA = find(a), rootOfB = find(b); <span class=\"comment\">// 分别找到两个节点的根节点</span></span><br><span class=\"line\">        father[rootOfA] = rootOfB; <span class=\"comment\">// 将其中一个根节点设置为另一个的子节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"路径压缩算法\"><a href=\"#路径压缩算法\" class=\"headerlink\" title=\"路径压缩算法\"></a>路径压缩算法</h2><p>这里只展示<code>int find(int x)</code>方法的实现。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == father[x]) <span class=\"keyword\">return</span> x; <span class=\"comment\">// 找到根节点，直接返回</span></span><br><span class=\"line\">    father[x] = find(father[x]); <span class=\"comment\">// 未找到根节点，继续向上递归，找到根节点后进行路径压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> father[x];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"按秩合并算法\"><a href=\"#按秩合并算法\" class=\"headerlink\" title=\"按秩合并算法\"></a>按秩合并算法</h2><p>这里只展示与普通算法的不同。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; father;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    UnionFind(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化，将每个节点的根节点设置为它本身，即每个节点都代表一个独立的子集。并将每个节点的秩都设置为1</span></span><br><span class=\"line\">        father.resize(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) father[i] = i;</span><br><span class=\"line\">        rank.resize(n, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略.....</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootOfA = find(a), rootOfB = find(b); <span class=\"comment\">// 分别找到两个节点的根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rank[rootOfA] &lt;= rank[rootOfB]) father[rootOfA] = rootOfB; <span class=\"comment\">// rootA的秩较小，将它作为rootB的子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> father[rootOfB] = rootOfA; <span class=\"comment\">// 反之将rootB作为rootA的子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rank[rootOfA] == rank[rootOfB]) rank[rootOfB]++; <span class=\"comment\">// 如果秩相同，必定有其中一个根节点的秩增大，这里根据24行的具体实现可知是节点rootB的秩增大</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><ul>\n<li><a href=\"https://leetcode-cn.com/problems/regions-cut-by-slashes/\" target=\"_blank\" rel=\"noopener\">LeetCode 959. 由斜杠划分区域</a></li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/93647900\" target=\"_blank\" rel=\"noopener\">算法学习笔记(1) : 并查集</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86\" target=\"_blank\" rel=\"noopener\">并查集- 维基百科，自由的百科全书</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"问题定义\"><a href=\"#问题定义\" class=\"headerlink\" title=\"问题定义\"></a>问题定义</h1><p>并查集是一种树型的数据结构，用于处理一些不交集的合并及查询问题。<br>有两种操作并查集的操作。一是Find（查找），用于确定某个元素属于哪个子集；二是Union（联合），用于将两个子集合并成一个集合。上述两种算法也称为联合-查找算法。<br>","more":"</p>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><p>对于并查集，需要解决两个问题，数据结构的表示方法以及联合-查找算法的具体实现。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>首先需要明确的有</p>\n<ul>\n<li>在并查集中可能有多个子集，每个子集形成一个树形结构。通过树形结构的根节点来区分子集，每个根节点与子集一一对应。</li>\n<li>对于每一个节点，我们只关心这个节点本身，以及它的祖先节点。其中祖先节点的作用是标记某个节点属于哪一个子集。</li>\n</ul>\n<p>因此一般可以用一维数组来表示并查集。</p>\n<ul>\n<li>数组的每一个元素对应一个节点。</li>\n<li>元素的下标用于区分节点，元素的值用于表示对应节点的祖先节点，也即表示了节点属于哪一个子集。</li>\n<li>根节点的父节点是它本身。</li>\n<li>初始状态下，并查集的节点之间没有亲缘关系，即每个节点的初始根节点都是它本身。</li>\n</ul>\n<p>举例：设数组F。若有F[a] = b，则表示节点a的祖先节点是b。</p>\n<h2 id=\"查找算法\"><a href=\"#查找算法\" class=\"headerlink\" title=\"查找算法\"></a>查找算法</h2><p>作用：给定某个节点，查找该节点的根节点。</p>\n<h3 id=\"方法一：普通算法\"><a href=\"#方法一：普通算法\" class=\"headerlink\" title=\"方法一：普通算法\"></a>方法一：普通算法</h3><p>对于每个节点，我们可以知道该节点的祖先节点，从该节点的祖先节点出发，不断向上寻找，直到根节点。可用递归实现。<br>方法一较为简单，但是在树的深度较大时，寻找的路径较长，且每次查找同一个节点均需重复遍历相同的路径，时间复杂度较高。由于查找算法的最终目的是获取根节点，即不关心查找路径中的其它节点，故可以设法对查找路径进行压缩。</p>\n<h3 id=\"方法二：带路径压缩的算法\"><a href=\"#方法二：带路径压缩的算法\" class=\"headerlink\" title=\"方法二：带路径压缩的算法\"></a>方法二：带路径压缩的算法</h3><p>在方法一的基础上进行改进，同样采用递归的方式获取根节点，但是获取到根节点后不直接返回，而是先将被查询节点的祖先节点设置为根节点，然后再返回。这样下次再查询相同节点时，便可直接找到根节点，起到路径压缩的作用。<br>举例：被查找的节点为a，其祖先节点为b，查找到根节点r，则将a的祖先节点直接设置为r，即F[a] = r，然后再返回根节点r。</p>\n<h2 id=\"联合算法\"><a href=\"#联合算法\" class=\"headerlink\" title=\"联合算法\"></a>联合算法</h2><p>作用：给定节点a和节点b，将节点a所在的子集和节点b所在的子集合并为一个集合。</p>\n<h3 id=\"方法一：普通算法-1\"><a href=\"#方法一：普通算法-1\" class=\"headerlink\" title=\"方法一：普通算法\"></a>方法一：普通算法</h3><p>先利用查找算法分别找到节点a和b的根节点rootA和rootB。然后将其中一个根节点设置为另一个根节点的子节点，即F[rootA]=rootB（将rootA设置为rootB的子节点）或F[rootB]=rootA（将rootB设置为rootA的子节点）。<br>方法一中，对于将哪一个根节点作为子节点并无要求，这样的话就可能出现深度较大的子集合并到深度较小的子集的情况，导致新集合的深度更大，从而增大了查找路径。</p>\n<h3 id=\"方法二：按秩合并的算法\"><a href=\"#方法二：按秩合并的算法\" class=\"headerlink\" title=\"方法二：按秩合并的算法\"></a>方法二：按秩合并的算法</h3><p>新增一个数组rank，用于记录每个节点的深度（秩）。同样先利用查找算法找到根节点，然后比较两个根节点的深度，将深度较小的根节点作为另一个根节点的子节点。合并完成后再相应地更新rank数组。</p>\n<h1 id=\"C-实现\"><a href=\"#C-实现\" class=\"headerlink\" title=\"C++实现\"></a>C++实现</h1><h2 id=\"普通算法\"><a href=\"#普通算法\" class=\"headerlink\" title=\"普通算法\"></a>普通算法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; father;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    UnionFind(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化，将每个节点的根节点设置为它本身，即每个节点都代表一个独立的子集</span></span><br><span class=\"line\">        father.resize(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) father[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == father[x]) <span class=\"keyword\">return</span> x; <span class=\"comment\">// 找到根节点，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> find(father[x]); <span class=\"comment\">// 未找到根节点，继续向上递归</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootOfA = find(a), rootOfB = find(b); <span class=\"comment\">// 分别找到两个节点的根节点</span></span><br><span class=\"line\">        father[rootOfA] = rootOfB; <span class=\"comment\">// 将其中一个根节点设置为另一个的子节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"路径压缩算法\"><a href=\"#路径压缩算法\" class=\"headerlink\" title=\"路径压缩算法\"></a>路径压缩算法</h2><p>这里只展示<code>int find(int x)</code>方法的实现。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == father[x]) <span class=\"keyword\">return</span> x; <span class=\"comment\">// 找到根节点，直接返回</span></span><br><span class=\"line\">    father[x] = find(father[x]); <span class=\"comment\">// 未找到根节点，继续向上递归，找到根节点后进行路径压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> father[x];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"按秩合并算法\"><a href=\"#按秩合并算法\" class=\"headerlink\" title=\"按秩合并算法\"></a>按秩合并算法</h2><p>这里只展示与普通算法的不同。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnionFind</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; father;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; rank;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    UnionFind(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化，将每个节点的根节点设置为它本身，即每个节点都代表一个独立的子集。并将每个节点的秩都设置为1</span></span><br><span class=\"line\">        father.resize(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) father[i] = i;</span><br><span class=\"line\">        rank.resize(n, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略.....</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rootOfA = find(a), rootOfB = find(b); <span class=\"comment\">// 分别找到两个节点的根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rank[rootOfA] &lt;= rank[rootOfB]) father[rootOfA] = rootOfB; <span class=\"comment\">// rootA的秩较小，将它作为rootB的子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> father[rootOfB] = rootOfA; <span class=\"comment\">// 反之将rootB作为rootA的子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rank[rootOfA] == rank[rootOfB]) rank[rootOfB]++; <span class=\"comment\">// 如果秩相同，必定有其中一个根节点的秩增大，这里根据24行的具体实现可知是节点rootB的秩增大</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><ul>\n<li><a href=\"https://leetcode-cn.com/problems/regions-cut-by-slashes/\" target=\"_blank\" rel=\"noopener\">LeetCode 959. 由斜杠划分区域</a></li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/93647900\" target=\"_blank\" rel=\"noopener\">算法学习笔记(1) : 并查集</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86\" target=\"_blank\" rel=\"noopener\">并查集- 维基百科，自由的百科全书</a></li>\n</ol>"},{"title":"Keil开发环境build报错解决方法A1067E","mathjax":true,"date":"2019-03-21T02:31:32.000Z","_content":"\n\n\n错误内容：Error: A1067E: Output file specified as '..\\src\\startup_stm32f4xx.s', but it has already been specified as '.\\startup_stm32f4xx.o'\n<!-- more -->\n错误代码是A1067E，在Keil官网查询得到错误原因如下\n> A1067E: Output file specified as '<filename1>', but it has already been specified as '<filename2>'\n> More than one output file, -o filename, has been specified on the command line. Misspelling a command line option can cause this.\n\n大概意思是文件重复，但是查找后并没有出现文件重复的现象，官网也没有给出具体的解决方案，后来发现可以有如下解决方案。\n# 方案1： \n在Keil界面中进入Project->Optionns for Target->Device，然后找到自己所用板子的型号，选定。若已选定，更新一下。\n![](Solution1.png)\n# 方案2：\n可能是没有安装对应Devices的开发包导致的，当然如果没有安装开发包的话在方案一中提到的Project->Optionns for Target->Device页面中应该也是找不到对应的Device的，我个人遇到的就是这种情况，由于Keil是新安装的于是忽视了这一点。解决方案如下。\n首先进入Keil界面，打开pack install。\n![](step1.png)\n然后在左侧搜索自己所用的devices型号（例如我的是stm32F4系列），这时候右侧的packs页面会同步显示出对应的开发包，在对应的开发包位置点击Install，便会开始自动下载安装。\n![](step2and3.png)\n但是需要注意的是，通过pack install下载速度似乎非常慢，而且经常提示stall，建议通过官网下载对应型号的pack然后直接在pack install中导入，如果发现官网下载速度也较慢，这里提供了一些stm32F1、stm32F2、stm32F3、stm32F4的pack的第三方下载地址，实测用迅雷下载速度很快。\nF1pack包 https://keilpack.azureedge.net/pack/Keil.STM32F1xx_DFP.2.3.0.pack\nF2pack包 https://keilpack.azureedge.net/pack/Keil.STM32F2xx_DFP.2.9.0.pack\nF3pack包 https://keilpack.azureedge.net/pack/Keil.STM32F3xx_DFP.2.1.0.pack\nF4pack包 https://keilpack.azureedge.net/pack/Keil.STM32F4xx_DFP.2.13.0.pack\n(以上链接转载自：https://blog.csdn.net/junyilao/article/details/77679702 )","source":"_posts/2019-03-21-Keil开发环境build报错解决方法A1067E.md","raw":"---\ntitle: Keil开发环境build报错解决方法A1067E\ntags:\n  - 嵌入式\n  - STM32\n  - Keil\ncategories:\n  - 学习笔记\nmathjax: true\ndate: 2019-03-21 10:31:32\n---\n\n\n\n错误内容：Error: A1067E: Output file specified as '..\\src\\startup_stm32f4xx.s', but it has already been specified as '.\\startup_stm32f4xx.o'\n<!-- more -->\n错误代码是A1067E，在Keil官网查询得到错误原因如下\n> A1067E: Output file specified as '<filename1>', but it has already been specified as '<filename2>'\n> More than one output file, -o filename, has been specified on the command line. Misspelling a command line option can cause this.\n\n大概意思是文件重复，但是查找后并没有出现文件重复的现象，官网也没有给出具体的解决方案，后来发现可以有如下解决方案。\n# 方案1： \n在Keil界面中进入Project->Optionns for Target->Device，然后找到自己所用板子的型号，选定。若已选定，更新一下。\n![](Solution1.png)\n# 方案2：\n可能是没有安装对应Devices的开发包导致的，当然如果没有安装开发包的话在方案一中提到的Project->Optionns for Target->Device页面中应该也是找不到对应的Device的，我个人遇到的就是这种情况，由于Keil是新安装的于是忽视了这一点。解决方案如下。\n首先进入Keil界面，打开pack install。\n![](step1.png)\n然后在左侧搜索自己所用的devices型号（例如我的是stm32F4系列），这时候右侧的packs页面会同步显示出对应的开发包，在对应的开发包位置点击Install，便会开始自动下载安装。\n![](step2and3.png)\n但是需要注意的是，通过pack install下载速度似乎非常慢，而且经常提示stall，建议通过官网下载对应型号的pack然后直接在pack install中导入，如果发现官网下载速度也较慢，这里提供了一些stm32F1、stm32F2、stm32F3、stm32F4的pack的第三方下载地址，实测用迅雷下载速度很快。\nF1pack包 https://keilpack.azureedge.net/pack/Keil.STM32F1xx_DFP.2.3.0.pack\nF2pack包 https://keilpack.azureedge.net/pack/Keil.STM32F2xx_DFP.2.9.0.pack\nF3pack包 https://keilpack.azureedge.net/pack/Keil.STM32F3xx_DFP.2.1.0.pack\nF4pack包 https://keilpack.azureedge.net/pack/Keil.STM32F4xx_DFP.2.13.0.pack\n(以上链接转载自：https://blog.csdn.net/junyilao/article/details/77679702 )","slug":"Keil开发环境build报错解决方法A1067E","published":1,"updated":"2021-01-31T06:38:17.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkl44zco000c70udx6uw6hqr","content":"<p>错误内容：Error: A1067E: Output file specified as ‘..\\src\\startup_stm32f4xx.s’, but it has already been specified as ‘.\\startup_stm32f4xx.o’<br><a id=\"more\"></a><br>错误代码是A1067E，在Keil官网查询得到错误原因如下</p>\n<blockquote>\n<p>A1067E: Output file specified as ‘<filename1>‘, but it has already been specified as ‘<filename2>‘<br>More than one output file, -o filename, has been specified on the command line. Misspelling a command line option can cause this.</filename2></filename1></p>\n</blockquote>\n<p>大概意思是文件重复，但是查找后并没有出现文件重复的现象，官网也没有给出具体的解决方案，后来发现可以有如下解决方案。</p>\n<h1 id=\"方案1：\"><a href=\"#方案1：\" class=\"headerlink\" title=\"方案1：\"></a>方案1：</h1><p>在Keil界面中进入Project-&gt;Optionns for Target-&gt;Device，然后找到自己所用板子的型号，选定。若已选定，更新一下。<br><img src=\"Solution1.png\" alt></p>\n<h1 id=\"方案2：\"><a href=\"#方案2：\" class=\"headerlink\" title=\"方案2：\"></a>方案2：</h1><p>可能是没有安装对应Devices的开发包导致的，当然如果没有安装开发包的话在方案一中提到的Project-&gt;Optionns for Target-&gt;Device页面中应该也是找不到对应的Device的，我个人遇到的就是这种情况，由于Keil是新安装的于是忽视了这一点。解决方案如下。<br>首先进入Keil界面，打开pack install。<br><img src=\"step1.png\" alt><br>然后在左侧搜索自己所用的devices型号（例如我的是stm32F4系列），这时候右侧的packs页面会同步显示出对应的开发包，在对应的开发包位置点击Install，便会开始自动下载安装。<br><img src=\"step2and3.png\" alt><br>但是需要注意的是，通过pack install下载速度似乎非常慢，而且经常提示stall，建议通过官网下载对应型号的pack然后直接在pack install中导入，如果发现官网下载速度也较慢，这里提供了一些stm32F1、stm32F2、stm32F3、stm32F4的pack的第三方下载地址，实测用迅雷下载速度很快。<br>F1pack包 <a href=\"https://keilpack.azureedge.net/pack/Keil.STM32F1xx_DFP.2.3.0.pack\" target=\"_blank\" rel=\"noopener\">https://keilpack.azureedge.net/pack/Keil.STM32F1xx_DFP.2.3.0.pack</a><br>F2pack包 <a href=\"https://keilpack.azureedge.net/pack/Keil.STM32F2xx_DFP.2.9.0.pack\" target=\"_blank\" rel=\"noopener\">https://keilpack.azureedge.net/pack/Keil.STM32F2xx_DFP.2.9.0.pack</a><br>F3pack包 <a href=\"https://keilpack.azureedge.net/pack/Keil.STM32F3xx_DFP.2.1.0.pack\" target=\"_blank\" rel=\"noopener\">https://keilpack.azureedge.net/pack/Keil.STM32F3xx_DFP.2.1.0.pack</a><br>F4pack包 <a href=\"https://keilpack.azureedge.net/pack/Keil.STM32F4xx_DFP.2.13.0.pack\" target=\"_blank\" rel=\"noopener\">https://keilpack.azureedge.net/pack/Keil.STM32F4xx_DFP.2.13.0.pack</a><br>(以上链接转载自：<a href=\"https://blog.csdn.net/junyilao/article/details/77679702\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/junyilao/article/details/77679702</a> )</p>\n","site":{"data":{}},"excerpt":"<p>错误内容：Error: A1067E: Output file specified as ‘..\\src\\startup_stm32f4xx.s’, but it has already been specified as ‘.\\startup_stm32f4xx.o’<br>","more":"<br>错误代码是A1067E，在Keil官网查询得到错误原因如下</p>\n<blockquote>\n<p>A1067E: Output file specified as ‘<filename1>‘, but it has already been specified as ‘<filename2>‘<br>More than one output file, -o filename, has been specified on the command line. Misspelling a command line option can cause this.</filename2></filename1></p>\n</blockquote>\n<p>大概意思是文件重复，但是查找后并没有出现文件重复的现象，官网也没有给出具体的解决方案，后来发现可以有如下解决方案。</p>\n<h1 id=\"方案1：\"><a href=\"#方案1：\" class=\"headerlink\" title=\"方案1：\"></a>方案1：</h1><p>在Keil界面中进入Project-&gt;Optionns for Target-&gt;Device，然后找到自己所用板子的型号，选定。若已选定，更新一下。<br><img src=\"Solution1.png\" alt></p>\n<h1 id=\"方案2：\"><a href=\"#方案2：\" class=\"headerlink\" title=\"方案2：\"></a>方案2：</h1><p>可能是没有安装对应Devices的开发包导致的，当然如果没有安装开发包的话在方案一中提到的Project-&gt;Optionns for Target-&gt;Device页面中应该也是找不到对应的Device的，我个人遇到的就是这种情况，由于Keil是新安装的于是忽视了这一点。解决方案如下。<br>首先进入Keil界面，打开pack install。<br><img src=\"step1.png\" alt><br>然后在左侧搜索自己所用的devices型号（例如我的是stm32F4系列），这时候右侧的packs页面会同步显示出对应的开发包，在对应的开发包位置点击Install，便会开始自动下载安装。<br><img src=\"step2and3.png\" alt><br>但是需要注意的是，通过pack install下载速度似乎非常慢，而且经常提示stall，建议通过官网下载对应型号的pack然后直接在pack install中导入，如果发现官网下载速度也较慢，这里提供了一些stm32F1、stm32F2、stm32F3、stm32F4的pack的第三方下载地址，实测用迅雷下载速度很快。<br>F1pack包 <a href=\"https://keilpack.azureedge.net/pack/Keil.STM32F1xx_DFP.2.3.0.pack\" target=\"_blank\" rel=\"noopener\">https://keilpack.azureedge.net/pack/Keil.STM32F1xx_DFP.2.3.0.pack</a><br>F2pack包 <a href=\"https://keilpack.azureedge.net/pack/Keil.STM32F2xx_DFP.2.9.0.pack\" target=\"_blank\" rel=\"noopener\">https://keilpack.azureedge.net/pack/Keil.STM32F2xx_DFP.2.9.0.pack</a><br>F3pack包 <a href=\"https://keilpack.azureedge.net/pack/Keil.STM32F3xx_DFP.2.1.0.pack\" target=\"_blank\" rel=\"noopener\">https://keilpack.azureedge.net/pack/Keil.STM32F3xx_DFP.2.1.0.pack</a><br>F4pack包 <a href=\"https://keilpack.azureedge.net/pack/Keil.STM32F4xx_DFP.2.13.0.pack\" target=\"_blank\" rel=\"noopener\">https://keilpack.azureedge.net/pack/Keil.STM32F4xx_DFP.2.13.0.pack</a><br>(以上链接转载自：<a href=\"https://blog.csdn.net/junyilao/article/details/77679702\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/junyilao/article/details/77679702</a> )</p>"}],"PostAsset":[{"_id":"source/_posts/2019-03-02-基于CHNN的旅行商问题/circuit.png","slug":"circuit.png","post":"ckkl44zbm000470udp7w0rnrf","modified":0,"renderable":0},{"_id":"source/_posts/2019-03-02-基于CHNN的旅行商问题/result.bmp","slug":"result.bmp","post":"ckkl44zbm000470udp7w0rnrf","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckkl44zcg000b70udsclw4pnu","category_id":"ckkl44zc0000870udlnk236fh","_id":"ckkl44zd0000f70udocwaar86"},{"post_id":"ckkl44zbm000470udp7w0rnrf","category_id":"ckkl44zc0000870udlnk236fh","_id":"ckkl44zde000i70udxdy7vm76"},{"post_id":"ckkl44zco000c70udx6uw6hqr","category_id":"ckkl44zc0000870udlnk236fh","_id":"ckkl44zdj000k70udri4x0izk"},{"post_id":"ckkl44zbt000670ud12axj9wj","category_id":"ckkl44zct000d70uduqlumakk","_id":"ckkl44zdu000n70ud12niid3y"},{"post_id":"ckkl44zca000a70ud1nkwi3hu","category_id":"ckkl44zc0000870udlnk236fh","_id":"ckkl44ze0000p70ud4hrpqrfu"}],"PostTag":[{"post_id":"ckkl44zbm000470udp7w0rnrf","tag_id":"ckkl44zc7000970udl8utrw9w","_id":"ckkl44zdh000j70uds8fw0wco"},{"post_id":"ckkl44zbm000470udp7w0rnrf","tag_id":"ckkl44zcv000e70ud5j9deslz","_id":"ckkl44zdk000l70ud97h3qy6l"},{"post_id":"ckkl44zbt000670ud12axj9wj","tag_id":"ckkl44zd4000h70udpk6sy3ss","_id":"ckkl44zdx000o70udjivn69jq"},{"post_id":"ckkl44zca000a70ud1nkwi3hu","tag_id":"ckkl44zdm000m70ud327vi3u8","_id":"ckkl44ze5000r70udiaazh2tn"},{"post_id":"ckkl44zcg000b70udsclw4pnu","tag_id":"ckkl44zdm000m70ud327vi3u8","_id":"ckkl44zea000t70ude246hb2z"},{"post_id":"ckkl44zco000c70udx6uw6hqr","tag_id":"ckkl44ze7000s70udn9aub801","_id":"ckkl44zel000w70udp0w21i53"},{"post_id":"ckkl44zco000c70udx6uw6hqr","tag_id":"ckkl44zed000u70udrkt9z4mt","_id":"ckkl44zen000x70udjowuric2"},{"post_id":"ckkl44zco000c70udx6uw6hqr","tag_id":"ckkl44zeh000v70udd3l0yfpg","_id":"ckkl44zep000y70udoo12xt10"}],"Tag":[{"name":"人工神经网络","_id":"ckkl44zc7000970udl8utrw9w"},{"name":"Matlab","_id":"ckkl44zcv000e70ud5j9deslz"},{"name":"Github","_id":"ckkl44zd4000h70udpk6sy3ss"},{"name":"数据结构与算法","_id":"ckkl44zdm000m70ud327vi3u8"},{"name":"嵌入式","_id":"ckkl44ze7000s70udn9aub801"},{"name":"STM32","_id":"ckkl44zed000u70udrkt9z4mt"},{"name":"Keil","_id":"ckkl44zeh000v70udd3l0yfpg"}]}}